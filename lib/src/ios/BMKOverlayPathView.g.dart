// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKOverlayPathView extends BMKOverlayView  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKOverlayPathView> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKOverlayPathView');
    final object = BMKOverlayPathView()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKOverlayPathView>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKOverlayPathView', {'length': length});
  
    final List<BMKOverlayPathView> typedResult = resultBatch.map((result) => BMKOverlayPathView()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<UIColor> get_fillColor() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_fillColor", {'refId': refId});
    kNativeObjectPool.add(UIColor()..refId = result..tag = 'bmap_map_fluttify');
    return UIColor()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<UIColor> get_strokeColor() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_strokeColor", {'refId': refId});
    kNativeObjectPool.add(UIColor()..refId = result..tag = 'bmap_map_fluttify');
    return UIColor()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<double> get_lineWidth() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_lineWidth", {'refId': refId});
  
    return result;
  }
  
  Future<double> get_miterLimit() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_miterLimit", {'refId': refId});
  
    return result;
  }
  
  Future<double> get_lineDashPhase() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_lineDashPhase", {'refId': refId});
  
    return result;
  }
  
  Future<List> get_lineDashPattern() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_lineDashPattern", {'refId': refId});
    kNativeObjectPool.addAll((result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'bmap_map_fluttify').toList());
    return (result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'bmap_map_fluttify').toList();
  }
  
  //endregion

  //region setters
  Future<void> set_fillColor(UIColor fillColor) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::set_fillColor', {'refId': refId, "fillColor": fillColor.refId});
  
  
  }
  
  Future<void> set_strokeColor(UIColor strokeColor) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::set_strokeColor', {'refId': refId, "strokeColor": strokeColor.refId});
  
  
  }
  
  Future<void> set_lineWidth(double lineWidth) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::set_lineWidth', {'refId': refId, "lineWidth": lineWidth});
  
  
  }
  
  Future<void> set_miterLimit(double miterLimit) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::set_miterLimit', {'refId': refId, "miterLimit": miterLimit});
  
  
  }
  
  Future<void> set_lineDashPhase(double lineDashPhase) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::set_lineDashPhase', {'refId': refId, "lineDashPhase": lineDashPhase});
  
  
  }
  
  Future<void> set_lineDashPattern(List lineDashPattern) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::set_lineDashPattern', {'refId': refId, "lineDashPattern": lineDashPattern.map((it) => it.refId).toList()});
  
  
  }
  
  //endregion

  //region methods
  Future<void> createPath() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKOverlayPathView@$refId::createPath([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::createPath', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> invalidatePath() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKOverlayPathView@$refId::invalidatePath([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::invalidatePath', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension BMKOverlayPathView_Batch on List<BMKOverlayPathView> {
  //region getters
  Future<List<UIColor>> get_fillColor_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_fillColor_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => UIColor()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<UIColor>> get_strokeColor_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_strokeColor_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => UIColor()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<double>> get_lineWidth_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_lineWidth_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_miterLimit_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_miterLimit_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_lineDashPhase_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_lineDashPhase_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<List>> get_lineDashPattern_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayPathView::get_lineDashPattern_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => (result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'bmap_map_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  //endregion

  //region methods
  Future<void> createPath_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::createPath_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> invalidatePath_batch() async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayPathView::invalidatePath_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}