// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKOverlayGLBasicView extends BMKOverlayView  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKOverlayGLBasicView> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKOverlayGLBasicView');
    final object = BMKOverlayGLBasicView()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKOverlayGLBasicView>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKOverlayGLBasicView', {'length': length});
  
    final List<BMKOverlayGLBasicView> typedResult = resultBatch.map((result) => BMKOverlayGLBasicView()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<UIColor> get_fillColor() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_fillColor", {'refId': refId});
    kNativeObjectPool.add(UIColor()..refId = result..tag = 'bmap_map_fluttify');
    return UIColor()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<UIColor> get_strokeColor() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_strokeColor", {'refId': refId});
    kNativeObjectPool.add(UIColor()..refId = result..tag = 'bmap_map_fluttify');
    return UIColor()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<double> get_lineWidth() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineWidth", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_lineDash() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineDash", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_tileTexture() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_tileTexture", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_keepScale() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_keepScale", {'refId': refId});
  
    return result;
  }
  
  Future<BMKLineJoinType> get_lineJoinType() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineJoinType", {'refId': refId});
  
    return BMKLineJoinType.values[result];
  }
  
  Future<BMKLineCapType> get_lineCapType() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineCapType", {'refId': refId});
  
    return BMKLineCapType.values[result];
  }
  
  Future<BMKLineDashType> get_lineDashType() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineDashType", {'refId': refId});
  
    return BMKLineDashType.values[result];
  }
  
  //endregion

  //region setters
  Future<void> set_fillColor(UIColor fillColor) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_fillColor', {'refId': refId, "fillColor": fillColor.refId});
  
  
  }
  
  Future<void> set_strokeColor(UIColor strokeColor) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_strokeColor', {'refId': refId, "strokeColor": strokeColor.refId});
  
  
  }
  
  Future<void> set_lineWidth(double lineWidth) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_lineWidth', {'refId': refId, "lineWidth": lineWidth});
  
  
  }
  
  Future<void> set_lineDash(bool lineDash) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_lineDash', {'refId': refId, "lineDash": lineDash});
  
  
  }
  
  Future<void> set_tileTexture(bool tileTexture) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_tileTexture', {'refId': refId, "tileTexture": tileTexture});
  
  
  }
  
  Future<void> set_keepScale(bool keepScale) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_keepScale', {'refId': refId, "keepScale": keepScale});
  
  
  }
  
  Future<void> set_lineJoinType(BMKLineJoinType lineJoinType) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_lineJoinType', {'refId': refId, "lineJoinType": lineJoinType.index});
  
  
  }
  
  Future<void> set_lineCapType(BMKLineCapType lineCapType) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_lineCapType', {'refId': refId, "lineCapType": lineCapType.index});
  
  
  }
  
  Future<void> set_lineDashType(BMKLineDashType lineDashType) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOverlayGLBasicView::set_lineDashType', {'refId': refId, "lineDashType": lineDashType.index});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKOverlayGLBasicView_Batch on List<BMKOverlayGLBasicView> {
  //region getters
  Future<List<UIColor>> get_fillColor_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_fillColor_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => UIColor()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<UIColor>> get_strokeColor_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_strokeColor_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => UIColor()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<double>> get_lineWidth_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineWidth_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_lineDash_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineDash_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_tileTexture_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_tileTexture_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_keepScale_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_keepScale_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<BMKLineJoinType>> get_lineJoinType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineJoinType_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKLineJoinType.values[result]).toList();
  
    return typedResult;
  }
  
  Future<List<BMKLineCapType>> get_lineCapType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineCapType_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKLineCapType.values[result]).toList();
  
    return typedResult;
  }
  
  Future<List<BMKLineDashType>> get_lineDashType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlayGLBasicView::get_lineDashType_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKLineDashType.values[result]).toList();
  
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}