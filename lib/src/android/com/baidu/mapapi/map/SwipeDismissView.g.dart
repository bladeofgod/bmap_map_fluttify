// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class com_baidu_mapapi_map_SwipeDismissView extends android_widget_RelativeLayout  {
  //region constants
  
  //endregion

  //region creators
  static Future<com_baidu_mapapi_map_SwipeDismissView> create__android_content_Context__android_view_View(android_content_Context var1, android_view_View var2) async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createcom_baidu_mapapi_map_SwipeDismissView__android_content_Context__android_view_View', {"var1": var1.refId, "var2": var2.refId});
    final object = com_baidu_mapapi_map_SwipeDismissView()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<com_baidu_mapapi_map_SwipeDismissView>> create_batch__android_content_Context__android_view_View(List<android_content_Context> var1, List<android_view_View> var2) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchcom_baidu_mapapi_map_SwipeDismissView__android_content_Context__android_view_View', [for (int i = 0; i < var1.length; i++) {"var1": var1[i].refId, "var2": var2[i].refId}]);
  
    final List<com_baidu_mapapi_map_SwipeDismissView> typedResult = resultBatch.map((result) => com_baidu_mapapi_map_SwipeDismissView()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  Future<void> setCallback(com_baidu_mapapi_map_WearMapView_OnDismissCallback var1) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.baidu.mapapi.map.SwipeDismissView@$refId::setCallback([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('com.baidu.mapapi.map.SwipeDismissView::setCallback', {"refId": refId});
  
  
    // handle native call
    MethodChannel('com.baidu.mapapi.map.SwipeDismissView::setCallback::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::com.baidu.mapapi.map.WearMapView.OnDismissCallback::onDismiss':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: onDismiss([])');
              }
        
              // handle the native call
              var1?.onDismiss();
              break;
            case 'Callback::com.baidu.mapapi.map.WearMapView.OnDismissCallback::onNotify':
              // print log
              if (fluttifyLogEnabled) {
                print('fluttify-dart-callback: onNotify([])');
              }
        
              // handle the native call
              var1?.onNotify();
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension com_baidu_mapapi_map_SwipeDismissView_Batch on List<com_baidu_mapapi_map_SwipeDismissView> {
  //region getters
  
  //endregion

  //region methods
  
  //endregion
}