//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "BMKMapViewFactory.h"
#import "BmapMapFluttifyPlugin.h"
#import <objc/runtime.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

@implementation BMKMapViewFactory {
  NSObject <FlutterPluginRegistrar> *_registrar;
}

- (instancetype)initWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (NSObject <FlutterPlatformView> *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args {
  return [[BMKMapViewPlatformView alloc] initWithViewId:viewId registrar:_registrar];
}

@end

@implementation BMKMapViewPlatformView {
  NSObject <FlutterPluginRegistrar> *_registrar;
  NSInteger _viewId;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype)initWithViewId:(NSInteger)viewId registrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _viewId = viewId;
    _registrar = registrar;
  }

  return self;
}

- (UIView *)view {
  BMKMapView *view = [[BMKMapView alloc] init];
  // 这里viewId加1是为了防止往HEAP里放了nil的key, 把HEAP内原先viewId为0的覆盖掉了, 因为nil实际上就是0
  HEAP[@(_viewId + 1)] = view;

  //region handlers
  _handlerMap = @{
      @"BMKMapView::customMapStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView::customMapStyle(暂未实现参数打印)");
          }
      
          // invoke native method
          [BMKMapView customMapStyle: customMapStyleJsonFilePath];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::enableCustomMapStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL enable = [args[@"enable"] boolValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView::enableCustomMapStyle(暂未实现参数打印)");
          }
      
          // invoke native method
          [BMKMapView enableCustomMapStyle: enable];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setCustomMapStylePath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setCustomMapStylePath(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCustomMapStylePath : customMapStyleJsonFilePath];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setCustomMapStylePathMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* customMapStyleJsonFilePath = (NSString*) args[@"customMapStyleJsonFilePath"];
          // jsonable arg
          int mode = [args[@"mode"] intValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setCustomMapStylePath(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCustomMapStylePath : customMapStyleJsonFilePath mode: mode];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setCustomMapStyleEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL enable = [args[@"enable"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setCustomMapStyleEnable(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCustomMapStyleEnable : enable];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setCustomMapStyleWithOptionPreLoadsuccessfailure": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          BMKCustomMapStyleOption* option = (BMKCustomMapStyleOption*) HEAP[@([args[@"option"] integerValue])];
      
      
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setCustomMapStyleWithOption(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCustomMapStyleWithOption : option preLoad: ^(NSString* path) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"BMKMapView::setCustomMapStyleWithOptionPreLoadsuccessfailure::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // jsonable callback arg
              NSString* argpath = path;
      
              [channel invokeMethod:@"Callback::void|NSString path::void|NSString path" arguments:@{@"path": argpath}];
      
          } success: ^(NSString* path) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"BMKMapView::setCustomMapStyleWithOptionPreLoadsuccessfailure::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // jsonable callback arg
              NSString* argpath = path;
      
              [channel invokeMethod:@"Callback::void|NSString path::void|NSString path" arguments:@{@"path": argpath}];
      
          } failure: ^(NSError* error, NSString* path) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"BMKMapView::setCustomMapStyleWithOptionPreLoadsuccessfailure::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              NSNumber* argerror = @(error.hash);
              HEAP[argerror] = error;
              // jsonable callback arg
              NSString* argpath = path;
      
              [channel invokeMethod:@"Callback::void|NSError error, NSString path::void|NSError error, NSString path" arguments:@{@"error": argerror, @"path": argpath}];
      
          }];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setCustomTrafficColorForSmoothSlowcongestionsevereCongestion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          UIColor* smooth = (UIColor*) HEAP[@([args[@"smooth"] integerValue])];
          // ref arg
          UIColor* slow = (UIColor*) HEAP[@([args[@"slow"] integerValue])];
          // ref arg
          UIColor* congestion = (UIColor*) HEAP[@([args[@"congestion"] integerValue])];
          // ref arg
          UIColor* severeCongestion = (UIColor*) HEAP[@([args[@"severeCongestion"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setCustomTrafficColorForSmooth(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setCustomTrafficColorForSmooth: smooth slow: slow congestion: congestion severeCongestion: severeCongestion];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::willBackGround": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView::willBackGround(暂未实现参数打印)");
          }
      
          // invoke native method
          [BMKMapView willBackGround];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::didForeGround": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView::didForeGround(暂未实现参数打印)");
          }
      
          // invoke native method
          [BMKMapView didForeGround];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::viewWillAppear": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::viewWillAppear(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref viewWillAppear ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::viewWillDisappear": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::viewWillDisappear(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref viewWillDisappear ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::mapForceRefresh": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::mapForceRefresh(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref mapForceRefresh ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::zoomIn": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::zoomIn(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref zoomIn];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::zoomOut": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::zoomOut(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref zoomOut];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::regionThatFits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          BMKCoordinateRegion region;
          [regionValue getValue:&region];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::regionThatFits(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKCoordinateRegion result = [ref regionThatFits: region];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setRegionAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          BMKCoordinateRegion region;
          [regionValue getValue:&region];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setRegion : region animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setCenterCoordinateAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setCenterCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCenterCoordinate : coordinate animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::takeSnapshot": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::takeSnapshot(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          UIImage* result = [ref takeSnapshot];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::takeSnapshot__CGRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          CGRect rect;
          [rectValue getValue:&rect];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::takeSnapshot(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          UIImage* result = [ref takeSnapshot: rect];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setCompassImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          UIImage* image = (UIImage*) HEAP[@([args[@"image"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setCompassImage(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setCompassImage : image];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setVisibleMapRectAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // jsonable arg
          BOOL animate = [args[@"animate"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setVisibleMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setVisibleMapRect : mapRect animated: animate];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::mapRectThatFits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::mapRectThatFits(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKMapRect result = [ref mapRectThatFits: mapRect];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setVisibleMapRectEdgePaddinganimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // struct arg
          NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
          // jsonable arg
          BOOL animate = [args[@"animate"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setVisibleMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setVisibleMapRect : mapRect edgePadding: insets animated: animate];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::fitVisibleMapRectEdgePaddingwithAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // struct arg
          NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
          // jsonable arg
          BOOL animate = [args[@"animate"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::fitVisibleMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref fitVisibleMapRect : mapRect edgePadding: insets withAnimated: animate];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::mapRectThatFitsEdgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // struct arg
          NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::mapRectThatFits(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::convertCoordinateToPointToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::convertCoordinate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::convertPointToCoordinateFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          CGPoint point;
          [pointValue getValue:&point];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::convertPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::convertRegionToRectToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          BMKCoordinateRegion region;
          [regionValue getValue:&region];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::convertRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGRect result = [ref convertRegion: region toRectToView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::convertRectToRegionFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          CGRect rect;
          [rectValue getValue:&rect];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::convertRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKCoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::convertMapRectToRectToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::convertMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGRect result = [ref convertMapRect: mapRect toRectToView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::convertRectToMapRectFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          CGRect rect;
          [rectValue getValue:&rect];
          // ref arg
          UIView* view = (UIView*) HEAP[@([args[@"view"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::convertRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKMapRect result = [ref convertRect: rect toMapRectFromView: view];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::glPointForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapPointValue = (NSValue*) HEAP[@([args[@"mapPoint"] integerValue])];
          BMKMapPoint mapPoint;
          [mapPointValue getValue:&mapPoint];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::glPointForMapPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGPoint result = [ref glPointForMapPoint: mapPoint];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::glPointsForMapPointsCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* mapPointsRefIdArray = (NSArray*) args[@"mapPoints"];
          BMKMapPoint mapPoints[mapPointsRefIdArray.count];
      
          for (int i = 0; i < mapPointsRefIdArray.count; i++) {
              NSValue* mapPointsValue = (NSValue*) HEAP[[mapPointsRefIdArray objectAtIndex:i]];
              BMKMapPoint mapPointsItem;
              [mapPointsValue getValue:&mapPointsItem];
              mapPoints[i] = mapPointsItem;
          }
          // jsonable arg
          NSUInteger count = [args[@"count"] unsignedIntegerValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::glPointsForMapPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGPoint* result = [ref glPointsForMapPoints: mapPoints count: count];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint*)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setMapCenterToScreenPt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* ptInScreenValue = (NSValue*) HEAP[@([args[@"ptInScreen"] integerValue])];
          CGPoint ptInScreen;
          [ptInScreenValue getValue:&ptInScreen];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setMapCenterToScreenPt(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setMapCenterToScreenPt : ptInScreen];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::getMapStatusFromCoordinateRegionEdgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          BMKCoordinateRegion region;
          [regionValue getValue:&region];
          // struct arg
          NSValue* insetsValue = (NSValue*) HEAP[@([args[@"insets"] integerValue])];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::getMapStatusFromCoordinateRegion(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKMapStatus* result = [ref getMapStatusFromCoordinateRegion: region edgePadding: insets];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::getMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::getMapStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKMapStatus* result = [ref getMapStatus];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          BMKMapStatus* mapStatus = (BMKMapStatus*) HEAP[@([args[@"mapStatus"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setMapStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setMapStatus : mapStatus];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setMapStatusWithAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          BMKMapStatus* mapStatus = (BMKMapStatus*) HEAP[@([args[@"mapStatus"] integerValue])];
          // jsonable arg
          BOOL bAnimation = [args[@"bAnimation"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setMapStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setMapStatus : mapStatus withAnimation: bAnimation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::setMapStatusWithAnimationwithAnimationTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          BMKMapStatus* mapStatus = (BMKMapStatus*) HEAP[@([args[@"mapStatus"] integerValue])];
          // jsonable arg
          BOOL bAnimation = [args[@"bAnimation"] boolValue];
          // jsonable arg
          int ulDuration = [args[@"ulDuration"] intValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::setMapStatus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setMapStatus : mapStatus withAnimation: bAnimation withAnimationTime: ulDuration];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::isSurpportBaiduHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::isSurpportBaiduHeatMap(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref isSurpportBaiduHeatMap];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::switchBaseIndoorMapFloorWithID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* strFloor = (NSString*) args[@"strFloor"];
          // jsonable arg
          NSString* strID = (NSString*) args[@"strID"];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::switchBaseIndoorMapFloor(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKSwitchIndoorFloorError result = [ref switchBaseIndoorMapFloor: strFloor withID: strID];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::getFocusedBaseIndoorMapInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::getFocusedBaseIndoorMapInfo(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKBaseIndoorMapInfo* result = [ref getFocusedBaseIndoorMapInfo];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::updateLocationViewWithParam": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          BMKLocationViewDisplayParam* locationViewDisplayParam = (BMKLocationViewDisplayParam*) HEAP[@([args[@"locationViewDisplayParam"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::updateLocationViewWithParam(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref updateLocationViewWithParam : locationViewDisplayParam];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::updateLocationData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          BMKUserLocation* userLocation = (BMKUserLocation*) HEAP[@([args[@"userLocation"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::updateLocationData(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref updateLocationData : userLocation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::addAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKAnnotation> annotation = (id<BMKAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::addAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addAnnotation : annotation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::addAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
          NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
          for (int i = 0; i < annotationsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
              [annotations addObject:item];
          }
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::addAnnotations(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addAnnotations : annotations];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::removeAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKAnnotation> annotation = (id<BMKAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::removeAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeAnnotation : annotation];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::removeAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
          NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
          for (int i = 0; i < annotationsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
              [annotations addObject:item];
          }
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::removeAnnotations(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeAnnotations : annotations];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::viewForAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKAnnotation> annotation = (id<BMKAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::viewForAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKAnnotationView* result = [ref viewForAnnotation: annotation];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::dequeueReusableAnnotationViewWithIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::dequeueReusableAnnotationViewWithIdentifier(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::selectAnnotationAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKAnnotation> annotation = (id<BMKAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::selectAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref selectAnnotation : annotation animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::deselectAnnotationAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKAnnotation> annotation = (id<BMKAnnotation>) HEAP[@([args[@"annotation"] integerValue])];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::deselectAnnotation(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref deselectAnnotation : annotation animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::showAnnotationsAnimated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
          NSMutableArray<NSArray*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
          for (int i = 0; i < annotationsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[annotationsRefArray objectAtIndex:i]];
              [annotations addObject:item];
          }
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::showAnnotations(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref showAnnotations : annotations animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::annotationsInCoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* boundsValue = (NSValue*) HEAP[@([args[@"bounds"] integerValue])];
          BMKCoordinateBounds bounds;
          [boundsValue getValue:&bounds];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::annotationsInCoordinateBounds(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref annotationsInCoordinateBounds: bounds];
      
          // result
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::addOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKOverlay> overlay = (id<BMKOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::addOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addOverlay : overlay];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::addOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
          NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
          for (int i = 0; i < overlaysRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
              [overlays addObject:item];
          }
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::addOverlays(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addOverlays : overlays];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::removeOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKOverlay> overlay = (id<BMKOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::removeOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeOverlay : overlay];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::removeOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
          NSMutableArray<NSArray*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
          for (int i = 0; i < overlaysRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[overlaysRefArray objectAtIndex:i]];
              [overlays addObject:item];
          }
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::removeOverlays(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeOverlays : overlays];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::insertOverlayAtIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKOverlay> overlay = (id<BMKOverlay>) HEAP[@([args[@"overlay"] integerValue])];
          // jsonable arg
          NSUInteger index = [args[@"index"] unsignedIntegerValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::insertOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref insertOverlay : overlay atIndex: index];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::exchangeOverlayAtIndexWithOverlayAtIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
          // jsonable arg
          NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::exchangeOverlayAtIndex(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::insertOverlayAboveOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKOverlay> overlay = (id<BMKOverlay>) HEAP[@([args[@"overlay"] integerValue])];
          // ref arg
          id<BMKOverlay> sibling = (id<BMKOverlay>) HEAP[@([args[@"sibling"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::insertOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref insertOverlay : overlay aboveOverlay: sibling];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::insertOverlayBelowOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKOverlay> overlay = (id<BMKOverlay>) HEAP[@([args[@"overlay"] integerValue])];
          // ref arg
          id<BMKOverlay> sibling = (id<BMKOverlay>) HEAP[@([args[@"sibling"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::insertOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref insertOverlay : overlay belowOverlay: sibling];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::viewForOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKOverlay> overlay = (id<BMKOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::viewForOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKOverlayView* result = [ref viewForOverlay: overlay];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::addHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          BMKHeatMap* heatMap = (BMKHeatMap*) HEAP[@([args[@"heatMap"] integerValue])];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::addHeatMap(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref addHeatMap : heatMap];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::removeHeatMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKMapView@%@::removeHeatMap(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref removeHeatMap ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKMapView::get_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_mapType");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BMKMapType result = ref.mapType;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_region");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BMKCoordinateRegion result = ref.region;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_limitMapRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_limitMapRegion");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BMKCoordinateRegion result = ref.limitMapRegion;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_compassPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_compassPosition");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.compassPosition;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_compassSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_compassSize");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.compassSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_centerCoordinate");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CLLocationCoordinate2D result = ref.centerCoordinate;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_zoomLevel");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          float result = ref.zoomLevel;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_minZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_minZoomLevel");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          float result = ref.minZoomLevel;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_maxZoomLevel");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          float result = ref.maxZoomLevel;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_rotation");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          int result = ref.rotation;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_overlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_overlooking");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          int result = ref.overlooking;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_minOverlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_minOverlooking");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          int result = ref.minOverlooking;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isBuildingsEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isBuildingsEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.buildingsEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_showMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_showMapPoi");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showMapPoi;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isTrafficEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isTrafficEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.trafficEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isBaiduHeatMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isBaiduHeatMapEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.baiduHeatMapEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_gesturesEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_gesturesEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.gesturesEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isZoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isZoomEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.zoomEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isZoomEnabledWithTap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isZoomEnabledWithTap");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.zoomEnabledWithTap;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isScrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isScrollEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.scrollEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isOverlookEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isOverlookEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.overlookEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isRotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isRotateEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.rotateEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_forceTouchEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_forceTouchEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.forceTouchEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_showMapScaleBar": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_showMapScaleBar");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showMapScaleBar;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_mapScaleBarPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_mapScaleBarPosition");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGPoint result = ref.mapScaleBarPosition;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_mapScaleBarSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_mapScaleBarSize");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          CGSize result = ref.mapScaleBarSize;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGSize)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_logoPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_logoPosition");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BMKLogoPosition result = ref.logoPosition;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_visibleMapRect");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BMKMapRect result = ref.visibleMapRect;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_mapPadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_mapPadding");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          UIEdgeInsets result = ref.mapPadding;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(UIEdgeInsets)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_updateTargetScreenPtWhenMapPaddingChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_updateTargetScreenPtWhenMapPaddingChanged");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.updateTargetScreenPtWhenMapPaddingChanged;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isChangeWithTouchPointCenterEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isChangeWithTouchPointCenterEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.ChangeWithTouchPointCenterEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isChangeCenterWithDoubleTouchPointEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isChangeCenterWithDoubleTouchPointEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.ChangeCenterWithDoubleTouchPointEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_baseIndoorMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_baseIndoorMapEnabled");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.baseIndoorMapEnabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_showIndoorMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_showIndoorMapPoi");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showIndoorMapPoi;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_showsUserLocation");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.showsUserLocation;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_userTrackingMode");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BMKUserTrackingMode result = ref.userTrackingMode;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isUserLocationVisible": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isUserLocationVisible");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.userLocationVisible;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_annotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_annotations");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.annotations;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_isSelectedAnnotationViewFront": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_isSelectedAnnotationViewFront");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          BOOL result = ref.isSelectedAnnotationViewFront;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::get_overlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::get_overlays");
          }
      
          // ref object
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray* result = ref.overlays;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"BMKMapView::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_delegate");
          }
      
          // args
      
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_mapType");
          }
      
          // args
          // enum arg
          BMKMapType mapType = (BMKMapType) [args[@"mapType"] integerValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.mapType = mapType;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_region");
          }
      
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) HEAP[@([args[@"region"] integerValue])];
          BMKCoordinateRegion region;
          [regionValue getValue:&region];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.region = region;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_limitMapRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_limitMapRegion");
          }
      
          // args
          // struct arg
          NSValue* limitMapRegionValue = (NSValue*) HEAP[@([args[@"limitMapRegion"] integerValue])];
          BMKCoordinateRegion limitMapRegion;
          [limitMapRegionValue getValue:&limitMapRegion];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.limitMapRegion = limitMapRegion;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_compassPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_compassPosition");
          }
      
          // args
          // struct arg
          NSValue* compassPositionValue = (NSValue*) HEAP[@([args[@"compassPosition"] integerValue])];
          CGPoint compassPosition;
          [compassPositionValue getValue:&compassPosition];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.compassPosition = compassPosition;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_centerCoordinate");
          }
      
          // args
          // struct arg
          NSValue* centerCoordinateValue = (NSValue*) HEAP[@([args[@"centerCoordinate"] integerValue])];
          CLLocationCoordinate2D centerCoordinate;
          [centerCoordinateValue getValue:&centerCoordinate];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.centerCoordinate = centerCoordinate;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_zoomLevel");
          }
      
          // args
          // jsonable arg
          float zoomLevel = [args[@"zoomLevel"] floatValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zoomLevel = zoomLevel;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_minZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_minZoomLevel");
          }
      
          // args
          // jsonable arg
          float minZoomLevel = [args[@"minZoomLevel"] floatValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.minZoomLevel = minZoomLevel;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_maxZoomLevel");
          }
      
          // args
          // jsonable arg
          float maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.maxZoomLevel = maxZoomLevel;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_rotation");
          }
      
          // args
          // jsonable arg
          int rotation = [args[@"rotation"] intValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rotation = rotation;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_overlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_overlooking");
          }
      
          // args
          // jsonable arg
          int overlooking = [args[@"overlooking"] intValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.overlooking = overlooking;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_minOverlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_minOverlooking");
          }
      
          // args
          // jsonable arg
          int minOverlooking = [args[@"minOverlooking"] intValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.minOverlooking = minOverlooking;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_buildingsEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_buildingsEnabled");
          }
      
          // args
          // jsonable arg
          BOOL buildingsEnabled = [args[@"buildingsEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.buildingsEnabled = buildingsEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_showMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_showMapPoi");
          }
      
          // args
          // jsonable arg
          BOOL showMapPoi = [args[@"showMapPoi"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showMapPoi = showMapPoi;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_trafficEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_trafficEnabled");
          }
      
          // args
          // jsonable arg
          BOOL trafficEnabled = [args[@"trafficEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.trafficEnabled = trafficEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_baiduHeatMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_baiduHeatMapEnabled");
          }
      
          // args
          // jsonable arg
          BOOL baiduHeatMapEnabled = [args[@"baiduHeatMapEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.baiduHeatMapEnabled = baiduHeatMapEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_gesturesEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_gesturesEnabled");
          }
      
          // args
          // jsonable arg
          BOOL gesturesEnabled = [args[@"gesturesEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.gesturesEnabled = gesturesEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_zoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_zoomEnabled");
          }
      
          // args
          // jsonable arg
          BOOL zoomEnabled = [args[@"zoomEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zoomEnabled = zoomEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_zoomEnabledWithTap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_zoomEnabledWithTap");
          }
      
          // args
          // jsonable arg
          BOOL zoomEnabledWithTap = [args[@"zoomEnabledWithTap"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zoomEnabledWithTap = zoomEnabledWithTap;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_scrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_scrollEnabled");
          }
      
          // args
          // jsonable arg
          BOOL scrollEnabled = [args[@"scrollEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.scrollEnabled = scrollEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_overlookEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_overlookEnabled");
          }
      
          // args
          // jsonable arg
          BOOL overlookEnabled = [args[@"overlookEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.overlookEnabled = overlookEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_rotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_rotateEnabled");
          }
      
          // args
          // jsonable arg
          BOOL rotateEnabled = [args[@"rotateEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rotateEnabled = rotateEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_forceTouchEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_forceTouchEnabled");
          }
      
          // args
          // jsonable arg
          BOOL forceTouchEnabled = [args[@"forceTouchEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.forceTouchEnabled = forceTouchEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_showMapScaleBar": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_showMapScaleBar");
          }
      
          // args
          // jsonable arg
          BOOL showMapScaleBar = [args[@"showMapScaleBar"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showMapScaleBar = showMapScaleBar;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_mapScaleBarPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_mapScaleBarPosition");
          }
      
          // args
          // struct arg
          NSValue* mapScaleBarPositionValue = (NSValue*) HEAP[@([args[@"mapScaleBarPosition"] integerValue])];
          CGPoint mapScaleBarPosition;
          [mapScaleBarPositionValue getValue:&mapScaleBarPosition];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.mapScaleBarPosition = mapScaleBarPosition;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_logoPosition": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_logoPosition");
          }
      
          // args
          // enum arg
          BMKLogoPosition logoPosition = (BMKLogoPosition) [args[@"logoPosition"] integerValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.logoPosition = logoPosition;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_visibleMapRect");
          }
      
          // args
          // struct arg
          NSValue* visibleMapRectValue = (NSValue*) HEAP[@([args[@"visibleMapRect"] integerValue])];
          BMKMapRect visibleMapRect;
          [visibleMapRectValue getValue:&visibleMapRect];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.visibleMapRect = visibleMapRect;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_mapPadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_mapPadding");
          }
      
          // args
          // struct arg
          NSValue* mapPaddingValue = (NSValue*) HEAP[@([args[@"mapPadding"] integerValue])];
          UIEdgeInsets mapPadding;
          [mapPaddingValue getValue:&mapPadding];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.mapPadding = mapPadding;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_updateTargetScreenPtWhenMapPaddingChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_updateTargetScreenPtWhenMapPaddingChanged");
          }
      
          // args
          // jsonable arg
          BOOL updateTargetScreenPtWhenMapPaddingChanged = [args[@"updateTargetScreenPtWhenMapPaddingChanged"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.updateTargetScreenPtWhenMapPaddingChanged = updateTargetScreenPtWhenMapPaddingChanged;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_ChangeWithTouchPointCenterEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_ChangeWithTouchPointCenterEnabled");
          }
      
          // args
          // jsonable arg
          BOOL ChangeWithTouchPointCenterEnabled = [args[@"ChangeWithTouchPointCenterEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.ChangeWithTouchPointCenterEnabled = ChangeWithTouchPointCenterEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_ChangeCenterWithDoubleTouchPointEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_ChangeCenterWithDoubleTouchPointEnabled");
          }
      
          // args
          // jsonable arg
          BOOL ChangeCenterWithDoubleTouchPointEnabled = [args[@"ChangeCenterWithDoubleTouchPointEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.ChangeCenterWithDoubleTouchPointEnabled = ChangeCenterWithDoubleTouchPointEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_baseIndoorMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_baseIndoorMapEnabled");
          }
      
          // args
          // jsonable arg
          BOOL baseIndoorMapEnabled = [args[@"baseIndoorMapEnabled"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.baseIndoorMapEnabled = baseIndoorMapEnabled;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_showIndoorMapPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_showIndoorMapPoi");
          }
      
          // args
          // jsonable arg
          BOOL showIndoorMapPoi = [args[@"showIndoorMapPoi"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showIndoorMapPoi = showIndoorMapPoi;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_showsUserLocation");
          }
      
          // args
          // jsonable arg
          BOOL showsUserLocation = [args[@"showsUserLocation"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.showsUserLocation = showsUserLocation;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_userTrackingMode");
          }
      
          // args
          // enum arg
          BMKUserTrackingMode userTrackingMode = (BMKUserTrackingMode) [args[@"userTrackingMode"] integerValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.userTrackingMode = userTrackingMode;
          methodResult(@"success");
      },
      
      @"BMKMapView::set_isSelectedAnnotationViewFront": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKMapView::set_isSelectedAnnotationViewFront");
          }
      
          // args
          // jsonable arg
          BOOL isSelectedAnnotationViewFront = [args[@"isSelectedAnnotationViewFront"] boolValue];
      
          // ref
          BMKMapView* ref = (BMKMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.isSelectedAnnotationViewFront = isSelectedAnnotationViewFront;
          methodResult(@"success");
      },
      
  };
  //endregion

  //region method call handler
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"com.fluttify/bmap_map_fluttify/BMKMapView"
            binaryMessenger:[_registrar messenger]];

  __weak __typeof(self)weakSelf = self;
  [channel setMethodCallHandler:^(FlutterMethodCall *methodCall, FlutterResult methodResult) {
    NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

    __strong __typeof(weakSelf)strongSelf = weakSelf;
    if (strongSelf->_handlerMap[methodCall.method] != nil) {
      strongSelf->_handlerMap[methodCall.method](strongSelf->_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }];
  //endregion
  return view;
}

//region delegate
- (void)mapViewDidFinishLoading : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishLoading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishLoading" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapViewDidRenderValidData : (BMKMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidRenderValidDataWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidRenderValidDataWithError" arguments:@{@"mapView": argmapView, @"error": argerror}];
  
}

- (void)mapViewDidFinishRendering : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishRendering");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishRendering" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapView : (BMKMapView*)mapView onDrawMapFrame: (BMKMapStatus*)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewOnDrawMapFrame");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argstatus = @(status.hash);
  HEAP[argstatus] = status;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewOnDrawMapFrame" arguments:@{@"mapView": argmapView, @"status": argstatus}];
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewRegionWillChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewRegionWillChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewRegionWillChangeAnimatedreason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewRegionWillChangeAnimatedreason" arguments:@{@"mapView": argmapView, @"animated": arganimated, @"reason": argreason}];
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewRegionDidChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewRegionDidChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewRegionDidChangeAnimatedreason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewRegionDidChangeAnimatedreason" arguments:@{@"mapView": argmapView, @"animated": arganimated, @"reason": argreason}];
  
}

- (BMKAnnotationView*)mapView : (BMKMapView*)mapView viewForAnnotation: (id<BMKAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewViewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argannotation = @(annotation.hash);
  HEAP[argannotation] = annotation;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewViewForAnnotation"
              arguments:@{}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (BMKMapView*)mapView didAddAnnotationViews: (NSArray*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // list callback arg
  NSMutableArray<NSNumber*>* argviews = [NSMutableArray arrayWithCapacity:views.count];
  for (int i = 0; i < views.count; i++) {
      NSObject* item = ((NSObject*) [views objectAtIndex:i]);
      // return to dart side data
      argviews[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidAddAnnotationViews" arguments:@{@"mapView": argmapView, @"views": argviews}];
  
}

- (void)mapView : (BMKMapView*)mapView clickAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewClickAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewClickAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (BMKMapView*)mapView didSelectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidSelectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (BMKMapView*)mapView didDeselectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidDeselectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (BMKMapView*)mapView annotationView: (BMKAnnotationView*)view didChangeDragState: (BMKAnnotationViewDragState)newState fromOldState: (BMKAnnotationViewDragState)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;
  // primitive callback arg
  NSNumber* argnewState = @(newState);
  // primitive callback arg
  NSNumber* argoldState = @(oldState);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState" arguments:@{@"mapView": argmapView, @"view": argview, @"newState": argnewState, @"oldState": argoldState}];
  
}

- (void)mapView : (BMKMapView*)mapView annotationViewForBubble: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewAnnotationViewForBubble");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewAnnotationViewForBubble" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (BMKOverlayView*)mapView : (BMKMapView*)mapView viewForOverlay: (id<BMKOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewViewForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argoverlay = @(overlay.hash);
  HEAP[argoverlay] = overlay;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewViewForOverlay"
              arguments:@{}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (BMKMapView*)mapView didAddOverlayViews: (NSArray*)overlayViews
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidAddOverlayViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // list callback arg
  NSMutableArray<NSNumber*>* argoverlayViews = [NSMutableArray arrayWithCapacity:overlayViews.count];
  for (int i = 0; i < overlayViews.count; i++) {
      NSObject* item = ((NSObject*) [overlayViews objectAtIndex:i]);
      // return to dart side data
      argoverlayViews[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidAddOverlayViews" arguments:@{@"mapView": argmapView, @"overlayViews": argoverlayViews}];
  
}

- (void)mapView : (BMKMapView*)mapView onClickedBMKOverlayView: (BMKOverlayView*)overlayView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewOnClickedBMKOverlayView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argoverlayView = @(overlayView.hash);
  HEAP[argoverlayView] = overlayView;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewOnClickedBMKOverlayView" arguments:@{@"mapView": argmapView, @"overlayView": argoverlayView}];
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapPoi: (BMKMapPoi*)mapPoi
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewOnClickedMapPoi");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argmapPoi = @(mapPoi.hash);
  HEAP[argmapPoi] = mapPoi;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewOnClickedMapPoi" arguments:@{@"mapView": argmapView, @"mapPoi": argmapPoi}];
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapBlank: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewOnClickedMapBlank");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewOnClickedMapBlank" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  
}

- (void)mapview : (BMKMapView*)mapView onDoubleClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapviewOnDoubleClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapviewOnDoubleClick" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  
}

- (void)mapview : (BMKMapView*)mapView onLongClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapviewOnLongClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapviewOnLongClick" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  
}

- (void)mapview : (BMKMapView*)mapView onForceTouch: (CLLocationCoordinate2D)coordinate force: (CGFloat)force maximumPossibleForce: (CGFloat)maximumPossibleForce
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapviewOnForceTouchforcemaximumPossibleForce");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  
  // primitive callback arg
  NSNumber* argforce = @(force);
  // primitive callback arg
  NSNumber* argmaximumPossibleForce = @(maximumPossibleForce);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapviewOnForceTouchforcemaximumPossibleForce" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate, @"force": argforce, @"maximumPossibleForce": argmaximumPossibleForce}];
  
}

- (void)mapStatusDidChanged : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapStatusDidChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapStatusDidChanged" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapview : (BMKMapView*)mapView baseIndoorMapWithIn: (BOOL)flag baseIndoorMapInfo: (BMKBaseIndoorMapInfo*)info
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapviewBaseIndoorMapWithInbaseIndoorMapInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* argflag = @(flag);
  // ref callback arg
  NSNumber* arginfo = @(info.hash);
  HEAP[arginfo] = info;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapviewBaseIndoorMapWithInbaseIndoorMapInfo" arguments:@{@"mapView": argmapView, @"flag": argflag, @"info": arginfo}];
  
}

- (void)onGetOfflineMapState : (int)type withState: (int)state
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKOfflineMapDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKOfflineMapDelegate::onGetOfflineMapStateWithState");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtype = @(type);
  // primitive callback arg
  NSNumber* argstate = @(state);

  [channel invokeMethod:@"Callback::BMKOfflineMapDelegate::onGetOfflineMapStateWithState" arguments:@{@"type": argtype, @"state": argstate}];
  
}

//endregion

@end
