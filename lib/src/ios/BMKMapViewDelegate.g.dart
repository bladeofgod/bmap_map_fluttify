// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

mixin BMKMapViewDelegate on NSObject {
  

  

  

  @mustCallSuper
  Future<void> mapViewDidFinishLoading(BMKMapView mapView) {
    kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidFinishLoading::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewDidRenderValidDataWithError(BMKMapView mapView, NSError error) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(error);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidRenderValidDataWithError::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewDidFinishRendering(BMKMapView mapView) {
    kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidFinishRendering::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewOnDrawMapFrame(BMKMapView mapView, BMKMapStatus status) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(status);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewOnDrawMapFrame::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewRegionWillChangeAnimated(BMKMapView mapView, bool animated) {
    kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewRegionWillChangeAnimated::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewRegionWillChangeAnimatedreason(BMKMapView mapView, bool animated, BMKRegionChangeReason reason) {
    kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewRegionWillChangeAnimatedreason::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewRegionDidChangeAnimated(BMKMapView mapView, bool animated) {
    kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewRegionDidChangeAnimated::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewRegionDidChangeAnimatedreason(BMKMapView mapView, bool animated, BMKRegionChangeReason reason) {
    kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewRegionDidChangeAnimatedreason::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<BMKAnnotationView> mapViewViewForAnnotation(BMKMapView mapView, BMKAnnotation annotation) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(annotation);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewViewForAnnotation::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewDidAddAnnotationViews(BMKMapView mapView, List<NSObject> views) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.addAll(views);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidAddAnnotationViews::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewClickAnnotationView(BMKMapView mapView, BMKAnnotationView view) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewClickAnnotationView::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewDidSelectAnnotationView(BMKMapView mapView, BMKAnnotationView view) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidSelectAnnotationView::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewDidDeselectAnnotationView(BMKMapView mapView, BMKAnnotationView view) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidDeselectAnnotationView::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewAnnotationViewdidChangeDragStatefromOldState(BMKMapView mapView, BMKAnnotationView view, int newState, int oldState) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewAnnotationViewdidChangeDragStatefromOldState::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewAnnotationViewForBubble(BMKMapView mapView, BMKAnnotationView view) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(view);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewAnnotationViewForBubble::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<BMKOverlayView> mapViewViewForOverlay(BMKMapView mapView, BMKOverlay overlay) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(overlay);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewViewForOverlay::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewDidAddOverlayViews(BMKMapView mapView, List<NSObject> overlayViews) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.addAll(overlayViews);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewDidAddOverlayViews::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewOnClickedBMKOverlayView(BMKMapView mapView, BMKOverlayView overlayView) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(overlayView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewOnClickedBMKOverlayView::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewOnClickedMapPoi(BMKMapView mapView, BMKMapPoi mapPoi) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(mapPoi);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewOnClickedMapPoi::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewOnClickedMapBlank(BMKMapView mapView, CLLocationCoordinate2D coordinate) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(coordinate);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewOnClickedMapBlank::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapviewOnDoubleClick(BMKMapView mapView, CLLocationCoordinate2D coordinate) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(coordinate);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapviewOnDoubleClick::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapviewOnLongClick(BMKMapView mapView, CLLocationCoordinate2D coordinate) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(coordinate);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapviewOnLongClick::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapviewOnForceTouchforcemaximumPossibleForce(BMKMapView mapView, CLLocationCoordinate2D coordinate, double force, double maximumPossibleForce) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(coordinate);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapviewOnForceTouchforcemaximumPossibleForce::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapStatusDidChanged(BMKMapView mapView) {
    kNativeObjectPool.add(mapView);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapStatusDidChanged::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapviewBaseIndoorMapWithInbaseIndoorMapInfo(BMKMapView mapView, bool flag, BMKBaseIndoorMapInfo info) {
    kNativeObjectPool.add(mapView);
    kNativeObjectPool.add(info);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapviewBaseIndoorMapWithInbaseIndoorMapInfo::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
}