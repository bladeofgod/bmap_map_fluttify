// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKGroundOverlay extends BMKMultiPoint with BMKAnnotation, BMKOverlay {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKGroundOverlay> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKGroundOverlay');
    final object = BMKGroundOverlay()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKGroundOverlay>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKGroundOverlay', {'length': length});
  
    final List<BMKGroundOverlay> typedResult = resultBatch.map((result) => BMKGroundOverlay()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<CLLocationCoordinate2D> get_pt() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGroundOverlay::get_pt", {'refId': refId});
    kNativeObjectPool.add(CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify');
    return CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<CGPoint> get_anchor() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGroundOverlay::get_anchor", {'refId': refId});
    kNativeObjectPool.add(CGPoint()..refId = result..tag = 'bmap_map_fluttify');
    return CGPoint()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<BMKCoordinateBounds> get_bound() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGroundOverlay::get_bound", {'refId': refId});
    kNativeObjectPool.add(BMKCoordinateBounds()..refId = result..tag = 'bmap_map_fluttify');
    return BMKCoordinateBounds()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<UIImage> get_icon() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGroundOverlay::get_icon", {'refId': refId});
    kNativeObjectPool.add(UIImage()..refId = result..tag = 'bmap_map_fluttify');
    return UIImage()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_pt(CLLocationCoordinate2D pt) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGroundOverlay::set_pt', {'refId': refId, "pt": pt.refId});
  
  
  }
  
  Future<void> set_anchor(CGPoint anchor) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGroundOverlay::set_anchor', {'refId': refId, "anchor": anchor.refId});
  
  
  }
  
  Future<void> set_bound(BMKCoordinateBounds bound) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGroundOverlay::set_bound', {'refId': refId, "bound": bound.refId});
  
  
  }
  
  Future<void> set_icon(UIImage icon) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGroundOverlay::set_icon', {'refId': refId, "icon": icon.refId});
  
  
  }
  
  //endregion

  //region methods
  static Future<BMKGroundOverlay> groundOverlayWithPositionZoomLevelanchoricon(CLLocationCoordinate2D position, double zoomLevel, CGPoint anchor, UIImage icon) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKGroundOverlay::groundOverlayWithPosition([\'zoomLevel\':$zoomLevel])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGroundOverlay::groundOverlayWithPositionZoomLevelanchoricon', {"position": position.refId, "zoomLevel": zoomLevel, "anchor": anchor.refId, "icon": icon.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(BMKGroundOverlay()..refId = result..tag = 'bmap_map_fluttify');
      return BMKGroundOverlay()..refId = result..tag = 'bmap_map_fluttify';
    }
  }
  
  static Future<BMKGroundOverlay> groundOverlayWithBoundsIcon(BMKCoordinateBounds bounds, UIImage icon) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKGroundOverlay::groundOverlayWithBounds([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGroundOverlay::groundOverlayWithBoundsIcon', {"bounds": bounds.refId, "icon": icon.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(BMKGroundOverlay()..refId = result..tag = 'bmap_map_fluttify');
      return BMKGroundOverlay()..refId = result..tag = 'bmap_map_fluttify';
    }
  }
  
  //endregion
}

extension BMKGroundOverlay_Batch on List<BMKGroundOverlay> {
  //region getters
  Future<List<CLLocationCoordinate2D>> get_pt_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGroundOverlay::get_pt_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<CGPoint>> get_anchor_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGroundOverlay::get_anchor_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CGPoint()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<BMKCoordinateBounds>> get_bound_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGroundOverlay::get_bound_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKCoordinateBounds()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<UIImage>> get_icon_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKGroundOverlay::get_icon_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => UIImage()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region methods
  Future<List<BMKGroundOverlay>> groundOverlayWithPositionZoomLevelanchoricon_batch(List<CLLocationCoordinate2D> position, List<double> zoomLevel, List<CGPoint> anchor, List<UIImage> icon) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGroundOverlay::groundOverlayWithPositionZoomLevelanchoricon_batch', [for (int i = 0; i < this.length; i++) {"position": position[i].refId, "zoomLevel": zoomLevel[i], "anchor": anchor[i].refId, "icon": icon[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => BMKGroundOverlay()..refId = result..tag = 'bmap_map_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<List<BMKGroundOverlay>> groundOverlayWithBoundsIcon_batch(List<BMKCoordinateBounds> bounds, List<UIImage> icon) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKGroundOverlay::groundOverlayWithBoundsIcon_batch', [for (int i = 0; i < this.length; i++) {"bounds": bounds[i].refId, "icon": icon[i].refId, "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => BMKGroundOverlay()..refId = result..tag = 'bmap_map_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  //endregion
}