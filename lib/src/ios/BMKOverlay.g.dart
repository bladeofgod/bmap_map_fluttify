// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

mixin BMKOverlay on BMKAnnotation {
  

  Future<CLLocationCoordinate2D> get_coordinate() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlay::get_coordinate", {'refId': refId});
    kNativeObjectPool.add(CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify');
    return CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<BMKMapRect> get_boundingMapRect() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOverlay::get_boundingMapRect", {'refId': refId});
    kNativeObjectPool.add(BMKMapRect()..refId = result..tag = 'bmap_map_fluttify');
    return BMKMapRect()..refId = result..tag = 'bmap_map_fluttify';
  }
  

  

  @mustCallSuper
  Future<bool> intersectsMapRect(BMKMapRect mapRect) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('intersectsMapRect::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
}