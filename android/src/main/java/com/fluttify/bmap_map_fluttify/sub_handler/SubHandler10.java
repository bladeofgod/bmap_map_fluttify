//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.bmap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.bmap_map_fluttify.BmapMapFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler10 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::SaveScreenToLocal_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // ref arg
                    android.os.Bundle var4 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.SaveScreenToLocal(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnRecordAdd_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.OnRecordAdd(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnRecordStart_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.OnRecordStart(var1, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnRecordSuspend_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.OnRecordSuspend(var1, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnRecordReload_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.OnRecordReload(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnRecordRemove_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.OnRecordRemove(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnRecordGetAll_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.OnRecordGetAll(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnRecordGetAt_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.OnRecordGetAt(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnRecordImport_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    boolean var3 = (boolean) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.OnRecordImport(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnHotcityGet_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.OnHotcityGet(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::OnSchcityGet_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.OnSchcityGet(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::CleanCache_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.CleanCache(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::addOneOverlayItem_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.os.Bundle var3 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addOneOverlayItem(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::addtileOverlay_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.os.Bundle var3 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.addtileOverlay(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::updateOneOverlayItem_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.os.Bundle var3 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.updateOneOverlayItem(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::updateSDKTile_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.os.Bundle var3 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.updateSDKTile(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::cleanSDKTileDataCache_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    long var3 = (long) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.cleanSDKTileDataCache(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::removeOneOverlayItem_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.os.Bundle var3 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.removeOneOverlayItem(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::PostStatInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.PostStatInfo(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::MapProc_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var0 = (long) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap.MapProc(var0, var2, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::CreateDuplicate_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.CreateDuplicate(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::GetScreenBuf_batch", (argsBatch, methodResult) -> {
                List<int[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int[] var3 = (int[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    int[] result;
                    try {
                        result = ref.GetScreenBuf(var1, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::enableDrawHouseHeight_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    boolean var3 = (boolean) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.enableDrawHouseHeight(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::isDrawHouseHeightEnable_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isDrawHouseHeightEnable(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::clearHeatMapLayerCache_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.clearHeatMapLayerCache(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::getCompassPosition_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    long var3 = (long) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getCompassPosition(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::getfocusedBaseIndoorMapInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getfocusedBaseIndoorMapInfo(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::SwitchBaseIndoorMapFloor_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.SwitchBaseIndoorMapFloor(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::ShowBaseIndoorMap_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    boolean var3 = (boolean) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.ShowBaseIndoorMap(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::IsBaseIndoorMapMode_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.IsBaseIndoorMapMode(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::setCustomMapStyleParam_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCustomMapStyleParam(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::SetMapCustomEnable_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var0 = (long) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap.SetMapCustomEnable(var0, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::setBackgroundTransparent_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setBackgroundTransparent(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::resetBackgroundTransparent_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.resetBackgroundTransparent(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::setCustomTrafficColor_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    long var3 = (long) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    long var5 = (long) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    long var7 = (long) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    long var9 = (long) ((Map<String, Object>) args).get("var9");
                    // jsonable arg
                    boolean var11 = (boolean) ((Map<String, Object>) args).get("var11");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setCustomTrafficColor(var1, var3, var5, var7, var9, var11);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::getProjectionMatrix_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    float[] var3 = (float[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.getProjectionMatrix(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::getViewMatrix_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    float[] var3 = (float[]) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.getViewMatrix(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap::setMapCustomEnableDynamic_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    boolean var3 = (boolean) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap ref = (com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMapCustomEnableDynamic(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.commonmemcache.JNICommonMemCache::Create_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.commonmemcache.JNICommonMemCache ref = (com.baidu.mapsdkplatform.comjni.map.commonmemcache.JNICommonMemCache) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.Create();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.commonmemcache.JNICommonMemCache::Init_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.commonmemcache.JNICommonMemCache ref = (com.baidu.mapsdkplatform.comjni.map.commonmemcache.JNICommonMemCache) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.Init(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::Create_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.Create();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::Release_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.Release(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::Load_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var4 = (String) ((Map<String, Object>) args).get("var4");
                    // jsonable arg
                    String var5 = (String) ((Map<String, Object>) args).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) args).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) args).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) args).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.Load(var1, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::SetType_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.SetType(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::Add_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.Add(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::Update_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var4 = (String) ((Map<String, Object>) args).get("var4");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.Update(var1, var3, var4);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::Remove_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.Remove(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::Clear_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.Clear(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::GetValue_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.GetValue(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::GetAll_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // ref arg
                    android.os.Bundle var3 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.GetAll(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::IsExist_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.IsExist(var1, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite::SaveCache_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite ref = (com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.SaveCache(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.JNIEngine::initClass_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    Object var0 = (Object) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.baidu.mapsdkplatform.comjni.engine.JNIEngine.initClass(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.JNIEngine::InitEngine_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.baidu.mapsdkplatform.comjni.engine.JNIEngine.InitEngine(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.JNIEngine::UnInitEngine_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.baidu.mapsdkplatform.comjni.engine.JNIEngine.UnInitEngine();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.JNIEngine::SetProxyInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.baidu.mapsdkplatform.comjni.engine.JNIEngine.SetProxyInfo(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.JNIEngine::StartSocketProc_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.baidu.mapsdkplatform.comjni.engine.JNIEngine.StartSocketProc();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.AppEngine::despatchMessage_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var0 = (int) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    long var3 = (long) ((Map<String, Object>) args).get("var3");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.baidu.mapsdkplatform.comjni.engine.AppEngine.despatchMessage(var0, var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.AppEngine::InitClass_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.baidu.mapsdkplatform.comjni.engine.AppEngine.InitClass();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.AppEngine::InitEngine_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.baidu.mapsdkplatform.comjni.engine.AppEngine.InitEngine(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.AppEngine::UnInitEngine_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.baidu.mapsdkplatform.comjni.engine.AppEngine.UnInitEngine();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.AppEngine::SetProxyInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.baidu.mapsdkplatform.comjni.engine.AppEngine.SetProxyInfo(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comjni.engine.AppEngine::StartSocketProc_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = com.baidu.mapsdkplatform.comjni.engine.AppEngine.StartSocketProc();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.NativeLoader::getInstance_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.baidu.mapsdkplatform.comapi.NativeLoader result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.NativeLoader.getInstance();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.NativeLoader::setContext_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.baidu.mapsdkplatform.comapi.NativeLoader.setContext(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.NativeLoader::loadLibrary_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.NativeLoader ref = (com.baidu.mapsdkplatform.comapi.NativeLoader) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.loadLibrary(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable::getInstance_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable.getInstance();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable::addObserver_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver var1 = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addObserver(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable::init_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.init();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable::updatePhoneInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.updatePhoneInfo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable::updateNetworkInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.updateNetworkInfo(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable::updateNetworkProxy_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObservable) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.updateNetworkProxy(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.AlgorithmUtil::setUrlNeedInfo_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.AlgorithmUtil.setUrlNeedInfo(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.AlgorithmUtil::getUrlNeedInfo_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    byte[] var2 = (byte[]) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.AlgorithmUtil.getUrlNeedInfo(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.CoordTrans::baiduToGcj_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.baidu.mapapi.model.LatLng var0 = (com.baidu.mapapi.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    com.baidu.mapapi.model.LatLng result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.CoordTrans.baiduToGcj(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.CoordTrans::gcjToBaidu_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.baidu.mapapi.model.LatLng var0 = (com.baidu.mapapi.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    com.baidu.mapapi.model.LatLng result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.CoordTrans.gcjToBaidu(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.CoordTrans::wgsToBaidu_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    com.baidu.mapapi.model.LatLng var0 = (com.baidu.mapapi.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    com.baidu.mapapi.model.LatLng result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.CoordTrans.wgsToBaidu(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SyncSysInfo::getAuthToken_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.SyncSysInfo.getAuthToken();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SyncSysInfo::getPhoneInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.SyncSysInfo.getPhoneInfo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.PermissionCheck::init_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.baidu.mapsdkplatform.comapi.util.PermissionCheck.init(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.PermissionCheck::permissionCheck_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.PermissionCheck.permissionCheck();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.PermissionCheck::destory_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        com.baidu.mapsdkplatform.comapi.util.PermissionCheck.destory();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.PermissionCheck::getPermissionResult_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.util.PermissionCheck.getPermissionResult();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver::init_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.init();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver::updatePhoneInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.updatePhoneInfo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver::updateNetworkInfo_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.updateNetworkInfo(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver::updateNetworkProxy_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver ref = (com.baidu.mapsdkplatform.comapi.util.SysUpdateObserver) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.updateNetworkProxy(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.map.VersionInfo::getApiVersion_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.map.VersionInfo.getApiVersion();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.map.VersionInfo::getVersionDesc_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.map.VersionInfo.getVersionDesc();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("com.baidu.mapsdkplatform.comapi.map.VersionInfo::getKitName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = com.baidu.mapsdkplatform.comapi.map.VersionInfo.getKitName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_UIMsg__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_UIMsg__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.UIMsg obj = new com.baidu.mapapi.UIMsg();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_NetworkUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_NetworkUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.NetworkUtil obj = new com.baidu.mapapi.NetworkUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_animation_AnimationSet__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_animation_AnimationSet__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.animation.AnimationSet obj = new com.baidu.mapapi.animation.AnimationSet();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_animation_Transformation__com_baidu_mapapi_model_LatLng", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_animation_Transformation__com_baidu_mapapi_model_LatLng");
            
                // args
                // ref arg
                com.baidu.mapapi.model.LatLng var1 = (com.baidu.mapapi.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.baidu.mapapi.animation.Transformation obj = new com.baidu.mapapi.animation.Transformation(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_animation_Transformation__android_graphics_Point", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_animation_Transformation__android_graphics_Point");
            
                // args
                // ref arg
                android.graphics.Point var1 = (android.graphics.Point) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.baidu.mapapi.animation.Transformation obj = new com.baidu.mapapi.animation.Transformation(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_animation_RotateAnimation__float__float", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_animation_RotateAnimation__float__float");
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.baidu.mapapi.animation.RotateAnimation obj = new com.baidu.mapapi.animation.RotateAnimation(new Double(var1).floatValue(), new Double(var2).floatValue());
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_animation_AlphaAnimation__float", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_animation_AlphaAnimation__float");
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.baidu.mapapi.animation.AlphaAnimation obj = new com.baidu.mapapi.animation.AlphaAnimation(new Double(var1).floatValue());
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_animation_ScaleAnimation__float", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_animation_ScaleAnimation__float");
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.baidu.mapapi.animation.ScaleAnimation obj = new com.baidu.mapapi.animation.ScaleAnimation(new Double(var1).floatValue());
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_navi_BaiduMapAppNotSupportNaviException__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_navi_BaiduMapAppNotSupportNaviException__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.navi.BaiduMapAppNotSupportNaviException obj = new com.baidu.mapapi.navi.BaiduMapAppNotSupportNaviException();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_navi_BaiduMapAppNotSupportNaviException__String", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_navi_BaiduMapAppNotSupportNaviException__String");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.baidu.mapapi.navi.BaiduMapAppNotSupportNaviException obj = new com.baidu.mapapi.navi.BaiduMapAppNotSupportNaviException(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_navi_NaviParaOption__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_navi_NaviParaOption__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.navi.NaviParaOption obj = new com.baidu.mapapi.navi.NaviParaOption();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_navi_BaiduMapNavigation__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_navi_BaiduMapNavigation__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.navi.BaiduMapNavigation obj = new com.baidu.mapapi.navi.BaiduMapNavigation();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_navi_IllegalNaviArgumentException__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_navi_IllegalNaviArgumentException__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.navi.IllegalNaviArgumentException obj = new com.baidu.mapapi.navi.IllegalNaviArgumentException();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_navi_IllegalNaviArgumentException__String", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_navi_IllegalNaviArgumentException__String");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.baidu.mapapi.navi.IllegalNaviArgumentException obj = new com.baidu.mapapi.navi.IllegalNaviArgumentException(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_favorite_FavoritePoiInfo__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_favorite_FavoritePoiInfo__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.favorite.FavoritePoiInfo obj = new com.baidu.mapapi.favorite.FavoritePoiInfo();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_route_BaiduMapRoutePlan__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_route_BaiduMapRoutePlan__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.route.BaiduMapRoutePlan obj = new com.baidu.mapapi.utils.route.BaiduMapRoutePlan();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_route_IllegalRoutePlanArgumentException__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_route_IllegalRoutePlanArgumentException__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.route.IllegalRoutePlanArgumentException obj = new com.baidu.mapapi.utils.route.IllegalRoutePlanArgumentException();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_route_IllegalRoutePlanArgumentException__String", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_route_IllegalRoutePlanArgumentException__String");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.baidu.mapapi.utils.route.IllegalRoutePlanArgumentException obj = new com.baidu.mapapi.utils.route.IllegalRoutePlanArgumentException(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_route_RouteParaOption__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_route_RouteParaOption__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.route.RouteParaOption obj = new com.baidu.mapapi.utils.route.RouteParaOption();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_DistanceUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_DistanceUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.DistanceUtil obj = new com.baidu.mapapi.utils.DistanceUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_SpatialRelationUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_SpatialRelationUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.SpatialRelationUtil obj = new com.baidu.mapapi.utils.SpatialRelationUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_CoordinateConverter__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_CoordinateConverter__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.CoordinateConverter obj = new com.baidu.mapapi.utils.CoordinateConverter();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_poi_PoiParaOption__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_poi_PoiParaOption__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.poi.PoiParaOption obj = new com.baidu.mapapi.utils.poi.PoiParaOption();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_poi_DispathcPoiData__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_poi_DispathcPoiData__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.poi.DispathcPoiData obj = new com.baidu.mapapi.utils.poi.DispathcPoiData();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_poi_IllegalPoiSearchArgumentException__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_poi_IllegalPoiSearchArgumentException__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.poi.IllegalPoiSearchArgumentException obj = new com.baidu.mapapi.utils.poi.IllegalPoiSearchArgumentException();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_poi_IllegalPoiSearchArgumentException__String", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_poi_IllegalPoiSearchArgumentException__String");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.baidu.mapapi.utils.poi.IllegalPoiSearchArgumentException obj = new com.baidu.mapapi.utils.poi.IllegalPoiSearchArgumentException(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_poi_BaiduMapPoiSearch__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_poi_BaiduMapPoiSearch__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.poi.BaiduMapPoiSearch obj = new com.baidu.mapapi.utils.poi.BaiduMapPoiSearch();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_OpenClientUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_OpenClientUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.OpenClientUtil obj = new com.baidu.mapapi.utils.OpenClientUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_utils_AreaUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_utils_AreaUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.utils.AreaUtil obj = new com.baidu.mapapi.utils.AreaUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_UIMsg_WalkNaviMsg__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_UIMsg_WalkNaviMsg__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.UIMsg.WalkNaviMsg obj = new com.baidu.mapapi.UIMsg.WalkNaviMsg();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_BMapManager__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_BMapManager__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.BMapManager obj = new com.baidu.mapapi.BMapManager();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_OpenLogUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_OpenLogUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.OpenLogUtil obj = new com.baidu.mapapi.OpenLogUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_common_SysOSUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_common_SysOSUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.common.SysOSUtil obj = new com.baidu.mapapi.common.SysOSUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_common_Logger__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_common_Logger__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.common.Logger obj = new com.baidu.mapapi.common.Logger();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_common_BaiduMapSDKException__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_common_BaiduMapSDKException__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.common.BaiduMapSDKException obj = new com.baidu.mapapi.common.BaiduMapSDKException();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_common_BaiduMapSDKException__String", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_common_BaiduMapSDKException__String");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                com.baidu.mapapi.common.BaiduMapSDKException obj = new com.baidu.mapapi.common.BaiduMapSDKException(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_common_EnvironmentUtilities__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_common_EnvironmentUtilities__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.common.EnvironmentUtilities obj = new com.baidu.mapapi.common.EnvironmentUtilities();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_common_AppTools__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_common_AppTools__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.common.AppTools obj = new com.baidu.mapapi.common.AppTools();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_HeatMap_Builder__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_HeatMap_Builder__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.HeatMap.Builder obj = new com.baidu.mapapi.map.HeatMap.Builder();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_PolygonHoleOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_PolygonHoleOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.PolygonHoleOptions obj = new com.baidu.mapapi.map.PolygonHoleOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_CircleHoleOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_CircleHoleOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.CircleHoleOptions obj = new com.baidu.mapapi.map.CircleHoleOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_MapPoi__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_MapPoi__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.MapPoi obj = new com.baidu.mapapi.map.MapPoi();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_BitmapDescriptorFactory__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_BitmapDescriptorFactory__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.BitmapDescriptorFactory obj = new com.baidu.mapapi.map.BitmapDescriptorFactory();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_MapViewLayoutParams_Builder__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_MapViewLayoutParams_Builder__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.MapViewLayoutParams.Builder obj = new com.baidu.mapapi.map.MapViewLayoutParams.Builder();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_DotOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_DotOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.DotOptions obj = new com.baidu.mapapi.map.DotOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_MyLocationData_Builder__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_MyLocationData_Builder__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.MyLocationData.Builder obj = new com.baidu.mapapi.map.MyLocationData.Builder();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_PolylineOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_PolylineOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.PolylineOptions obj = new com.baidu.mapapi.map.PolylineOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_Tile__int__int__byteArray", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_Tile__int__int__byteArray");
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
                // jsonable arg
                byte[] var3 = (byte[]) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.baidu.mapapi.map.Tile obj = new com.baidu.mapapi.map.Tile(var1, var2, var3);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_WinRound__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_WinRound__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.WinRound obj = new com.baidu.mapapi.map.WinRound();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_Gradient__intArray__floatArray", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_Gradient__intArray__floatArray");
            
                // args
                // jsonable arg
                int[] var1 = (int[]) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.baidu.mapapi.map.Gradient obj = new com.baidu.mapapi.map.Gradient(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_GroundOverlayOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_GroundOverlayOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.GroundOverlayOptions obj = new com.baidu.mapapi.map.GroundOverlayOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_MarkerOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_MarkerOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.MarkerOptions obj = new com.baidu.mapapi.map.MarkerOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_MapCustomStyleOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_MapCustomStyleOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.MapCustomStyleOptions obj = new com.baidu.mapapi.map.MapCustomStyleOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_Stroke__int__int", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_Stroke__int__int");
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.baidu.mapapi.map.Stroke obj = new com.baidu.mapapi.map.Stroke(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_PolygonOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_PolygonOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.PolygonOptions obj = new com.baidu.mapapi.map.PolygonOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_WeightedLatLng__com_baidu_mapapi_model_LatLng__double", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_WeightedLatLng__com_baidu_mapapi_model_LatLng__double");
            
                // args
                // ref arg
                com.baidu.mapapi.model.LatLng var1 = (com.baidu.mapapi.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // jsonable arg
                double var2 = (double) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.baidu.mapapi.map.WeightedLatLng obj = new com.baidu.mapapi.map.WeightedLatLng(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_WeightedLatLng__com_baidu_mapapi_model_LatLng", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_WeightedLatLng__com_baidu_mapapi_model_LatLng");
            
                // args
                // ref arg
                com.baidu.mapapi.model.LatLng var1 = (com.baidu.mapapi.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.baidu.mapapi.map.WeightedLatLng obj = new com.baidu.mapapi.map.WeightedLatLng(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_SwipeDismissView__android_content_Context__android_view_View", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_SwipeDismissView__android_content_Context__android_view_View");
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                android.view.View var2 = (android.view.View) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.baidu.mapapi.map.SwipeDismissView obj = new com.baidu.mapapi.map.SwipeDismissView(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_ArcOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_ArcOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.ArcOptions obj = new com.baidu.mapapi.map.ArcOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_InfoWindow__android_view_View__com_baidu_mapapi_model_LatLng__int", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_InfoWindow__android_view_View__com_baidu_mapapi_model_LatLng__int");
            
                // args
                // ref arg
                android.view.View var1 = (android.view.View) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.baidu.mapapi.model.LatLng var2 = (com.baidu.mapapi.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.baidu.mapapi.map.InfoWindow obj = new com.baidu.mapapi.map.InfoWindow(var1, var2, var3);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_InfoWindow__android_view_View__com_baidu_mapapi_model_LatLng__int__boolean__int", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_InfoWindow__android_view_View__com_baidu_mapapi_model_LatLng__int__boolean__int");
            
                // args
                // ref arg
                android.view.View var1 = (android.view.View) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.baidu.mapapi.model.LatLng var2 = (com.baidu.mapapi.model.LatLng) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) args).get("var3");
                // jsonable arg
                boolean var4 = (boolean) ((Map<String, Object>) args).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) args).get("var5");
            
                // create target object
                com.baidu.mapapi.map.InfoWindow obj = new com.baidu.mapapi.map.InfoWindow(var1, var2, var3, var4, var5);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_CircleOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_CircleOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.CircleOptions obj = new com.baidu.mapapi.map.CircleOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_ItemizedOverlay__android_graphics_drawable_Drawable__com_baidu_mapapi_map_MapView", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_ItemizedOverlay__android_graphics_drawable_Drawable__com_baidu_mapapi_map_MapView");
            
                // args
                // ref arg
                android.graphics.drawable.Drawable var1 = (android.graphics.drawable.Drawable) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.baidu.mapapi.map.MapView var2 = (com.baidu.mapapi.map.MapView) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.baidu.mapapi.map.ItemizedOverlay obj = new com.baidu.mapapi.map.ItemizedOverlay(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_TextureMapView__android_content_Context", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_TextureMapView__android_content_Context");
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.baidu.mapapi.map.TextureMapView obj = new com.baidu.mapapi.map.TextureMapView(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_TextureMapView__android_content_Context__com_baidu_mapapi_map_BaiduMapOptions", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_TextureMapView__android_content_Context__com_baidu_mapapi_map_BaiduMapOptions");
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.baidu.mapapi.map.BaiduMapOptions var2 = (com.baidu.mapapi.map.BaiduMapOptions) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.baidu.mapapi.map.TextureMapView obj = new com.baidu.mapapi.map.TextureMapView(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_HoleOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_HoleOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.HoleOptions obj = new com.baidu.mapapi.map.HoleOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_TileOverlayOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_TileOverlayOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.TileOverlayOptions obj = new com.baidu.mapapi.map.TileOverlayOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_BaiduMapOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_BaiduMapOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.BaiduMapOptions obj = new com.baidu.mapapi.map.BaiduMapOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_WearMapView__android_content_Context", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_WearMapView__android_content_Context");
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.baidu.mapapi.map.WearMapView obj = new com.baidu.mapapi.map.WearMapView(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_WearMapView__android_content_Context__com_baidu_mapapi_map_BaiduMapOptions", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_WearMapView__android_content_Context__com_baidu_mapapi_map_BaiduMapOptions");
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.baidu.mapapi.map.BaiduMapOptions var2 = (com.baidu.mapapi.map.BaiduMapOptions) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.baidu.mapapi.map.WearMapView obj = new com.baidu.mapapi.map.WearMapView(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_TextOptions__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_TextOptions__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.TextOptions obj = new com.baidu.mapapi.map.TextOptions();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_offline_MKOLUpdateElement__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_offline_MKOLUpdateElement__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.offline.MKOLUpdateElement obj = new com.baidu.mapapi.map.offline.MKOLUpdateElement();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_offline_OfflineMapUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_offline_OfflineMapUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.offline.OfflineMapUtil obj = new com.baidu.mapapi.map.offline.OfflineMapUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_offline_MKOLSearchRecord__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_offline_MKOLSearchRecord__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.offline.MKOLSearchRecord obj = new com.baidu.mapapi.map.offline.MKOLSearchRecord();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_offline_MKOfflineMap__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_offline_MKOfflineMap__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.map.offline.MKOfflineMap obj = new com.baidu.mapapi.map.offline.MKOfflineMap();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_MapView__android_content_Context", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_MapView__android_content_Context");
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                // create target object
                com.baidu.mapapi.map.MapView obj = new com.baidu.mapapi.map.MapView(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_map_MapView__android_content_Context__com_baidu_mapapi_map_BaiduMapOptions", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_map_MapView__android_content_Context__com_baidu_mapapi_map_BaiduMapOptions");
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                // ref arg
                com.baidu.mapapi.map.BaiduMapOptions var2 = (com.baidu.mapapi.map.BaiduMapOptions) getHEAP().get((int) ((Map<String, Object>) args).get("var2"));
            
                // create target object
                com.baidu.mapapi.map.MapView obj = new com.baidu.mapapi.map.MapView(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_http_AsyncHttpClient__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_http_AsyncHttpClient__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.http.AsyncHttpClient obj = new com.baidu.mapapi.http.AsyncHttpClient();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_UIMsg_NetDetectedType__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_UIMsg_NetDetectedType__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.UIMsg.NetDetectedType obj = new com.baidu.mapapi.UIMsg.NetDetectedType();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_model_LatLngBounds_Builder__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_model_LatLngBounds_Builder__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.model.LatLngBounds.Builder obj = new com.baidu.mapapi.model.LatLngBounds.Builder();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_model_inner_Point__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_model_inner_Point__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.model.inner.Point obj = new com.baidu.mapapi.model.inner.Point();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_model_inner_Point__int__int", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_model_inner_Point__int__int");
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                // create target object
                com.baidu.mapapi.model.inner.Point obj = new com.baidu.mapapi.model.inner.Point(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_model_inner_MapBound__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_model_inner_MapBound__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.model.inner.MapBound obj = new com.baidu.mapapi.model.inner.MapBound();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_model_inner_GeoPoint__double__double", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_model_inner_GeoPoint__double__double");
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.baidu.mapapi.model.inner.GeoPoint obj = new com.baidu.mapapi.model.inner.GeoPoint(var1, var3);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_model_LatLng__double__double", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_model_LatLng__double__double");
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) args).get("var3");
            
                // create target object
                com.baidu.mapapi.model.LatLng obj = new com.baidu.mapapi.model.LatLng(var1, var3);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_model_CoordUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_model_CoordUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.model.CoordUtil obj = new com.baidu.mapapi.model.CoordUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_model_ParcelItem__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_model_ParcelItem__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.model.ParcelItem obj = new com.baidu.mapapi.model.ParcelItem();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_VersionInfo__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_VersionInfo__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.VersionInfo obj = new com.baidu.mapapi.VersionInfo();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapapi_JNIInitializer__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapapi_JNIInitializer__");
            
                // args
            
            
                // create target object
                com.baidu.mapapi.JNIInitializer obj = new com.baidu.mapapi.JNIInitializer();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkvi_VDeviceAPI__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkvi_VDeviceAPI__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkvi.VDeviceAPI obj = new com.baidu.mapsdkvi.VDeviceAPI();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkvi_VMsg__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkvi_VMsg__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkvi.VMsg obj = new com.baidu.mapsdkvi.VMsg();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_android_bbalbs_common_util_CommonParam__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_android_bbalbs_common_util_CommonParam__");
            
                // args
            
            
                // create target object
                com.baidu.android.bbalbs.common.util.CommonParam obj = new com.baidu.android.bbalbs.common.util.CommonParam();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comjni_tools_ParcelItem__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comjni_tools_ParcelItem__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comjni.tools.ParcelItem obj = new com.baidu.mapsdkplatform.comjni.tools.ParcelItem();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comjni_tools_BundleKeySet__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comjni_tools_BundleKeySet__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comjni.tools.BundleKeySet obj = new com.baidu.mapsdkplatform.comjni.tools.BundleKeySet();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comjni_util_AppMD5__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comjni_util_AppMD5__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comjni.util.AppMD5 obj = new com.baidu.mapsdkplatform.comjni.util.AppMD5();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comjni_map_basemap_BaseMapCallback__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comjni_map_basemap_BaseMapCallback__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comjni.map.basemap.BaseMapCallback obj = new com.baidu.mapsdkplatform.comjni.map.basemap.BaseMapCallback();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comjni_map_basemap_JNIBaseMap__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comjni_map_basemap_JNIBaseMap__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap obj = new com.baidu.mapsdkplatform.comjni.map.basemap.JNIBaseMap();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comjni_map_commonmemcache_JNICommonMemCache__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comjni_map_commonmemcache_JNICommonMemCache__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comjni.map.commonmemcache.JNICommonMemCache obj = new com.baidu.mapsdkplatform.comjni.map.commonmemcache.JNICommonMemCache();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comjni_map_favorite_JNIFavorite__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comjni_map_favorite_JNIFavorite__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite obj = new com.baidu.mapsdkplatform.comjni.map.favorite.JNIFavorite();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comjni_engine_AppEngine__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comjni_engine_AppEngine__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comjni.engine.AppEngine obj = new com.baidu.mapsdkplatform.comjni.engine.AppEngine();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comapi_util_CoordTrans__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comapi_util_CoordTrans__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comapi.util.CoordTrans obj = new com.baidu.mapsdkplatform.comapi.util.CoordTrans();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comapi_util_SyncSysInfo__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comapi_util_SyncSysInfo__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comapi.util.SyncSysInfo obj = new com.baidu.mapsdkplatform.comapi.util.SyncSysInfo();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comapi_util_PermissionCheck__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comapi_util_PermissionCheck__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comapi.util.PermissionCheck obj = new com.baidu.mapsdkplatform.comapi.util.PermissionCheck();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comapi_favrite_FavSyncPoi__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comapi_favrite_FavSyncPoi__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comapi.favrite.FavSyncPoi obj = new com.baidu.mapsdkplatform.comapi.favrite.FavSyncPoi();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comapi_location_CoordinateType__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comapi_location_CoordinateType__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comapi.location.CoordinateType obj = new com.baidu.mapsdkplatform.comapi.location.CoordinateType();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comapi_map_MessageCenter__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comapi_map_MessageCenter__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comapi.map.MessageCenter obj = new com.baidu.mapsdkplatform.comapi.map.MessageCenter();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comapi_map_VersionInfo__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comapi_map_VersionInfo__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comapi.map.VersionInfo obj = new com.baidu.mapsdkplatform.comapi.map.VersionInfo();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcom_baidu_mapsdkplatform_comapi_commonutils_SysUpdateUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: com_baidu_mapsdkplatform_comapi_commonutils_SysUpdateUtil__");
            
                // args
            
            
                // create target object
                com.baidu.mapsdkplatform.comapi.commonutils.SysUpdateUtil obj = new com.baidu.mapsdkplatform.comapi.commonutils.SysUpdateUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::create_batchcom_baidu_mapapi_UIMsg__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.baidu.mapapi.UIMsg obj = new com.baidu.mapapi.UIMsg();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcom_baidu_mapapi_NetworkUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    com.baidu.mapapi.NetworkUtil obj = new com.baidu.mapapi.NetworkUtil();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
