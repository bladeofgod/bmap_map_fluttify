// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKMapStatus extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKMapStatus> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKMapStatus');
    final object = BMKMapStatus()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKMapStatus>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKMapStatus', {'length': length});
  
    final List<BMKMapStatus> typedResult = resultBatch.map((result) => BMKMapStatus()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<double> get_fLevel() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_fLevel", {'refId': refId});
  
    return result;
  }
  
  Future<double> get_fRotation() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_fRotation", {'refId': refId});
  
    return result;
  }
  
  Future<double> get_fOverlooking() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_fOverlooking", {'refId': refId});
  
    return result;
  }
  
  Future<CGPoint> get_targetScreenPt() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_targetScreenPt", {'refId': refId});
    kNativeObjectPool.add(CGPoint()..refId = result..tag = 'bmap_map_fluttify');
    return CGPoint()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<CLLocationCoordinate2D> get_targetGeoPt() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_targetGeoPt", {'refId': refId});
    kNativeObjectPool.add(CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify');
    return CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<BMKMapRect> get_visibleMapRect() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_visibleMapRect", {'refId': refId});
    kNativeObjectPool.add(BMKMapRect()..refId = result..tag = 'bmap_map_fluttify');
    return BMKMapRect()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_fLevel(double fLevel) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKMapStatus::set_fLevel', {'refId': refId, "fLevel": fLevel});
  
  
  }
  
  Future<void> set_fRotation(double fRotation) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKMapStatus::set_fRotation', {'refId': refId, "fRotation": fRotation});
  
  
  }
  
  Future<void> set_fOverlooking(double fOverlooking) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKMapStatus::set_fOverlooking', {'refId': refId, "fOverlooking": fOverlooking});
  
  
  }
  
  Future<void> set_targetScreenPt(CGPoint targetScreenPt) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKMapStatus::set_targetScreenPt', {'refId': refId, "targetScreenPt": targetScreenPt.refId});
  
  
  }
  
  Future<void> set_targetGeoPt(CLLocationCoordinate2D targetGeoPt) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKMapStatus::set_targetGeoPt', {'refId': refId, "targetGeoPt": targetGeoPt.refId});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKMapStatus_Batch on List<BMKMapStatus> {
  //region getters
  Future<List<double>> get_fLevel_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_fLevel_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_fRotation_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_fRotation_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_fOverlooking_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_fOverlooking_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<CGPoint>> get_targetScreenPt_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_targetScreenPt_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CGPoint()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<CLLocationCoordinate2D>> get_targetGeoPt_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_targetGeoPt_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<BMKMapRect>> get_visibleMapRect_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKMapStatus::get_visibleMapRect_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKMapRect()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}