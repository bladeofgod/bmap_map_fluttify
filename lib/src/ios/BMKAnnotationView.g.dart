// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKAnnotationView extends UIView  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKAnnotationView> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKAnnotationView');
    final object = BMKAnnotationView()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKAnnotationView>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKAnnotationView', {'length': length});
  
    final List<BMKAnnotationView> typedResult = resultBatch.map((result) => BMKAnnotationView()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_reuseIdentifier({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_reuseIdentifier", {'refId': refId});
  
    return result;
  }
  
  Future<BMKActionPaopaoView> get_paopaoView({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_paopaoView", {'refId': refId});
    kNativeObjectPool.add(BMKActionPaopaoView()..refId = result..tag = 'bmap_map_fluttify');
    return BMKActionPaopaoView()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<BMKAnnotation> get_annotation({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_annotation", {'refId': refId});
    kNativeObjectPool.add(BMKShape()..refId = result..tag = 'bmap_map_fluttify');
    return BMKShape()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<UIImage> get_image({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_image", {'refId': refId});
    kNativeObjectPool.add(UIImage()..refId = result..tag = 'bmap_map_fluttify');
    return UIImage()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<CGPoint> get_centerOffset({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_centerOffset", {'refId': refId});
    kNativeObjectPool.add(CGPoint()..refId = result..tag = 'bmap_map_fluttify');
    return CGPoint()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<CGPoint> get_calloutOffset({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_calloutOffset", {'refId': refId});
    kNativeObjectPool.add(CGPoint()..refId = result..tag = 'bmap_map_fluttify');
    return CGPoint()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<bool> get_enabled3D({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_enabled3D", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_enabled({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_isEnabled", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_selected({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_isSelected", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_canShowCallout({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_canShowCallout", {'refId': refId});
  
    return result;
  }
  
  Future<UIView> get_leftCalloutAccessoryView({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_leftCalloutAccessoryView", {'refId': refId});
    kNativeObjectPool.add(UIView()..refId = result..tag = 'bmap_map_fluttify');
    return UIView()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<UIView> get_rightCalloutAccessoryView({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_rightCalloutAccessoryView", {'refId': refId});
    kNativeObjectPool.add(UIView()..refId = result..tag = 'bmap_map_fluttify');
    return UIView()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<bool> get_draggable({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_isDraggable", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_dragState({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_dragState", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_hidePaopaoWhenSingleTapOnMap({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenSingleTapOnMap", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_hidePaopaoWhenDoubleTapOnMap({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenDoubleTapOnMap", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_hidePaopaoWhenTwoFingersTapOnMap({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenTwoFingersTapOnMap", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_hidePaopaoWhenSelectOthers({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenSelectOthers", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_hidePaopaoWhenDrag({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenDrag", {'refId': refId});
  
    return result;
  }
  
  Future<bool> get_hidePaopaoWhenDragOthers({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenDragOthers", {'refId': refId});
  
    return result;
  }
  
  Future<double> get_displayPriority({bool viewChannel = true}) async {
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_displayPriority", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_paopaoView(BMKActionPaopaoView paopaoView, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_paopaoView', {'refId': refId, "paopaoView": paopaoView.refId});
  
  
  }
  
  Future<void> set_annotation(BMKAnnotation annotation, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_annotation', {'refId': refId, "annotation": annotation.refId});
  
  
  }
  
  Future<void> set_image(UIImage image, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_image', {'refId': refId, "image": image.refId});
  
  
  }
  
  Future<void> set_centerOffset(CGPoint centerOffset, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_centerOffset', {'refId': refId, "centerOffset": centerOffset.refId});
  
  
  }
  
  Future<void> set_calloutOffset(CGPoint calloutOffset, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_calloutOffset', {'refId': refId, "calloutOffset": calloutOffset.refId});
  
  
  }
  
  Future<void> set_enabled3D(bool enabled3D, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_enabled3D', {'refId': refId, "enabled3D": enabled3D});
  
  
  }
  
  Future<void> set_enabled(bool enabled, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_enabled', {'refId': refId, "enabled": enabled});
  
  
  }
  
  Future<void> set_selected(bool selected, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_selected', {'refId': refId, "selected": selected});
  
  
  }
  
  Future<void> set_canShowCallout(bool canShowCallout, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_canShowCallout', {'refId': refId, "canShowCallout": canShowCallout});
  
  
  }
  
  Future<void> set_leftCalloutAccessoryView(UIView leftCalloutAccessoryView, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_leftCalloutAccessoryView', {'refId': refId, "leftCalloutAccessoryView": leftCalloutAccessoryView.refId});
  
  
  }
  
  Future<void> set_rightCalloutAccessoryView(UIView rightCalloutAccessoryView, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_rightCalloutAccessoryView', {'refId': refId, "rightCalloutAccessoryView": rightCalloutAccessoryView.refId});
  
  
  }
  
  Future<void> set_draggable(bool draggable, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_draggable', {'refId': refId, "draggable": draggable});
  
  
  }
  
  Future<void> set_dragState(int dragState, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_dragState', {'refId': refId, "dragState": dragState});
  
  
  }
  
  Future<void> set_hidePaopaoWhenSingleTapOnMap(bool hidePaopaoWhenSingleTapOnMap, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_hidePaopaoWhenSingleTapOnMap', {'refId': refId, "hidePaopaoWhenSingleTapOnMap": hidePaopaoWhenSingleTapOnMap});
  
  
  }
  
  Future<void> set_hidePaopaoWhenDoubleTapOnMap(bool hidePaopaoWhenDoubleTapOnMap, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_hidePaopaoWhenDoubleTapOnMap', {'refId': refId, "hidePaopaoWhenDoubleTapOnMap": hidePaopaoWhenDoubleTapOnMap});
  
  
  }
  
  Future<void> set_hidePaopaoWhenTwoFingersTapOnMap(bool hidePaopaoWhenTwoFingersTapOnMap, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_hidePaopaoWhenTwoFingersTapOnMap', {'refId': refId, "hidePaopaoWhenTwoFingersTapOnMap": hidePaopaoWhenTwoFingersTapOnMap});
  
  
  }
  
  Future<void> set_hidePaopaoWhenSelectOthers(bool hidePaopaoWhenSelectOthers, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_hidePaopaoWhenSelectOthers', {'refId': refId, "hidePaopaoWhenSelectOthers": hidePaopaoWhenSelectOthers});
  
  
  }
  
  Future<void> set_hidePaopaoWhenDrag(bool hidePaopaoWhenDrag, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_hidePaopaoWhenDrag', {'refId': refId, "hidePaopaoWhenDrag": hidePaopaoWhenDrag});
  
  
  }
  
  Future<void> set_hidePaopaoWhenDragOthers(bool hidePaopaoWhenDragOthers, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_hidePaopaoWhenDragOthers', {'refId': refId, "hidePaopaoWhenDragOthers": hidePaopaoWhenDragOthers});
  
  
  }
  
  Future<void> set_displayPriority(double displayPriority, {bool viewChannel = true}) async {
    await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::set_displayPriority', {'refId': refId, "displayPriority": displayPriority});
  
  
  }
  
  //endregion

  //region methods
  Future<NSObject> initWithAnnotationReuseIdentifier(BMKAnnotation annotation, String reuseIdentifier, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKAnnotationView@$refId::initWithAnnotation([\'reuseIdentifier\':$reuseIdentifier])');
    }
  
    // invoke native method
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::initWithAnnotationReuseIdentifier', {"annotation": annotation.refId, "reuseIdentifier": reuseIdentifier, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(NSObject()..refId = result..tag = 'bmap_map_fluttify');
      return NSObject()..refId = result..tag = 'bmap_map_fluttify';
    }
  }
  
  Future<void> prepareForReuse({bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKAnnotationView@$refId::prepareForReuse([])');
    }
  
    // invoke native method
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::prepareForReuse', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setSelectedAnimated(bool selected, bool animated, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: BMKAnnotationView@$refId::setSelected([\'selected\':$selected, \'animated\':$animated])');
    }
  
    // invoke native method
    final result = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::setSelectedAnimated', {"selected": selected, "animated": animated, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}

extension BMKAnnotationView_Batch on List<BMKAnnotationView> {
  //region getters
  Future<List<String>> get_reuseIdentifier_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_reuseIdentifier_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<BMKActionPaopaoView>> get_paopaoView_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_paopaoView_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKActionPaopaoView()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<BMKAnnotation>> get_annotation_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_annotation_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKShape()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<UIImage>> get_image_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_image_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => UIImage()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<CGPoint>> get_centerOffset_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_centerOffset_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CGPoint()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<CGPoint>> get_calloutOffset_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_calloutOffset_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CGPoint()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<bool>> get_enabled3D_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_enabled3D_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_enabled_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_isEnabled_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_selected_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_isSelected_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_canShowCallout_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_canShowCallout_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<UIView>> get_leftCalloutAccessoryView_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_leftCalloutAccessoryView_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => UIView()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<UIView>> get_rightCalloutAccessoryView_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_rightCalloutAccessoryView_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => UIView()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<bool>> get_draggable_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_isDraggable_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_dragState_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_dragState_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_hidePaopaoWhenSingleTapOnMap_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenSingleTapOnMap_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_hidePaopaoWhenDoubleTapOnMap_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenDoubleTapOnMap_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_hidePaopaoWhenTwoFingersTapOnMap_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenTwoFingersTapOnMap_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_hidePaopaoWhenSelectOthers_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenSelectOthers_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_hidePaopaoWhenDrag_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenDrag_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_hidePaopaoWhenDragOthers_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_hidePaopaoWhenDragOthers_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_displayPriority_batch({bool viewChannel = true}) async {
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod("BMKAnnotationView::get_displayPriority_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  //endregion

  //region methods
  Future<List<NSObject>> initWithAnnotationReuseIdentifier_batch(List<BMKAnnotation> annotation, List<String> reuseIdentifier, {bool viewChannel = true}) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::initWithAnnotationReuseIdentifier_batch', [for (int i = 0; i < this.length; i++) {"annotation": annotation[i].refId, "reuseIdentifier": reuseIdentifier[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => NSObject()..refId = result..tag = 'bmap_map_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  Future<void> prepareForReuse_batch({bool viewChannel = true}) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::prepareForReuse_batch', [for (int i = 0; i < this.length; i++) {"refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  Future<void> setSelectedAnimated_batch(List<bool> selected, List<bool> animated, {bool viewChannel = true}) async {
    // print log
    // if (fluttifyLogEnabled) {
    //   #__log__#
    // }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/bmap_map_fluttify/BMKAnnotationView' : 'com.fluttify/bmap_map_fluttify').invokeMethod('BMKAnnotationView::setSelectedAnimated_batch', [for (int i = 0; i < this.length; i++) {"selected": selected[i], "animated": animated[i], "refId": this[i].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).map((result) => result).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}