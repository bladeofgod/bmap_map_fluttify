//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "BMKOverlayViewFactory.h"
#import "BmapMapFluttifyPlugin.h"
#import <objc/runtime.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

@implementation BMKOverlayViewFactory {
  NSObject <FlutterPluginRegistrar> *_registrar;
}

- (instancetype)initWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (NSObject <FlutterPlatformView> *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args {
  return [[BMKOverlayViewPlatformView alloc] initWithViewId:viewId registrar:_registrar];
}

@end

@implementation BMKOverlayViewPlatformView {
  NSObject <FlutterPluginRegistrar> *_registrar;
  NSInteger _viewId;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype)initWithViewId:(NSInteger)viewId registrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _viewId = viewId;
    _registrar = registrar;
  }

  return self;
}

- (UIView *)view {
  BMKOverlayView *view = [[BMKOverlayView alloc] init];
  // 这里viewId加1是为了防止往HEAP里放了nil的key, 把HEAP内原先viewId为0的覆盖掉了, 因为nil实际上就是0
  HEAP[@(_viewId + 1)] = view;

  //region handlers
  _handlerMap = @{
      @"BMKOverlayView::setOverlayGeometryDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id delegate = (id) HEAP[@([args[@"delegate"] integerValue])];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::setOverlayGeometryDelegate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setOverlayGeometryDelegate : delegate];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::initWithOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<BMKOverlay> overlay = (id<BMKOverlay>) HEAP[@([args[@"overlay"] integerValue])];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::initWithOverlay(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          id result = [ref initWithOverlay: overlay];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          NSNumber* jsonableResult = @(((NSObject*) result).hash);
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::pointForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapPointValue = (NSValue*) HEAP[@([args[@"mapPoint"] integerValue])];
          BMKMapPoint mapPoint;
          [mapPointValue getValue:&mapPoint];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::pointForMapPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGPoint result = [ref pointForMapPoint: mapPoint];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::mapPointForPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
          CGPoint point;
          [pointValue getValue:&point];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::mapPointForPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKMapPoint result = [ref mapPointForPoint: point];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::rectForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::rectForMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          CGRect result = [ref rectForMapRect: mapRect];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::mapRectForRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
          CGRect rect;
          [rectValue getValue:&rect];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::mapRectForRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BMKMapRect result = [ref mapRectForRect: rect];
      
          // result
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
          HEAP[@(resultValue.hash)] = resultValue;
          NSNumber* jsonableResult = @(resultValue.hash);
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::canDrawMapRectZoomScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // jsonable arg
          BMKZoomScale zoomScale = [args[@"zoomScale"] floatValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::canDrawMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref canDrawMapRect: mapRect zoomScale: zoomScale];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::setNeedsDisplayInMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) HEAP[@([args[@"mapRect"] integerValue])];
          BMKMapRect mapRect;
          [mapRectValue getValue:&mapRect];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::setNeedsDisplayInMapRect(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setNeedsDisplayInMapRect : mapRect];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderLinesWithPointsPointCountstrokeColorlineWidthlooped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          BMKMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderLinesWithPointsPointCountstrokeColorlineWidthloopedlineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          BMKMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
          // enum arg
          BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped lineDashType: lineDashType];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderLinesWithPointsPointCountstrokeColorlineWidthloopedlineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          BMKMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          BOOL looped = [args[@"looped"] boolValue];
          // jsonable arg
          BOOL lineDash = [args[@"lineDash"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderLinesWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped lineDash: lineDash];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderTexturedLinesWithPartPointsLineWidthtextureIndexsisFocus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* partPtRefArray = (NSArray<NSNumber*> *) args[@"partPt"];
          NSMutableArray<NSArray*>* partPt = [NSMutableArray arrayWithCapacity:partPtRefArray.count];
          for (int i = 0; i < partPtRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[partPtRefArray objectAtIndex:i]];
              [partPt addObject:item];
          }
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // list arg
          NSArray<NSNumber*>* textureIndexsRefArray = (NSArray<NSNumber*> *) args[@"textureIndexs"];
          NSMutableArray<NSArray*>* textureIndexs = [NSMutableArray arrayWithCapacity:textureIndexsRefArray.count];
          for (int i = 0; i < textureIndexsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[textureIndexsRefArray objectAtIndex:i]];
              [textureIndexs addObject:item];
          }
          // jsonable arg
          BOOL isFoucs = [args[@"isFoucs"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPartPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderTexturedLinesWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFocus: isFoucs];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderTexturedLinesWithPartPointsLineWidthtextureIndexsisFocustileTexturekeepScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* partPtRefArray = (NSArray<NSNumber*> *) args[@"partPt"];
          NSMutableArray<NSArray*>* partPt = [NSMutableArray arrayWithCapacity:partPtRefArray.count];
          for (int i = 0; i < partPtRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[partPtRefArray objectAtIndex:i]];
              [partPt addObject:item];
          }
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // list arg
          NSArray<NSNumber*>* textureIndexsRefArray = (NSArray<NSNumber*> *) args[@"textureIndexs"];
          NSMutableArray<NSArray*>* textureIndexs = [NSMutableArray arrayWithCapacity:textureIndexsRefArray.count];
          for (int i = 0; i < textureIndexsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[textureIndexsRefArray objectAtIndex:i]];
              [textureIndexs addObject:item];
          }
          // jsonable arg
          BOOL isFoucs = [args[@"isFoucs"] boolValue];
          // jsonable arg
          BOOL tileTexture = [args[@"tileTexture"] boolValue];
          // jsonable arg
          BOOL keepscale = [args[@"keepscale"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderTexturedLinesWithPartPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderTexturedLinesWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFocus: isFoucs tileTexture: tileTexture keepScale: keepscale];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderMultiTexturedPolyLineWithPartPointsLineWidthtextureIndexsisFoucskeepScalelineJoinTypelineCapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* partPtRefArray = (NSArray<NSNumber*> *) args[@"partPt"];
          NSMutableArray<NSArray*>* partPt = [NSMutableArray arrayWithCapacity:partPtRefArray.count];
          for (int i = 0; i < partPtRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[partPtRefArray objectAtIndex:i]];
              [partPt addObject:item];
          }
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          NSNumber* textureIndexs = (NSNumber*) args[@"textureIndexs"];
          // jsonable arg
          BOOL isFoucs = [args[@"isFoucs"] boolValue];
          // jsonable arg
          BOOL keepScale = [args[@"keepScale"] boolValue];
          // enum arg
          BMKLineJoinType lineJoinType = (BMKLineJoinType) [args[@"lineJoinType"] integerValue];
          // enum arg
          BMKLineCapType lineCapType = (BMKLineCapType) [args[@"lineCapType"] integerValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderMultiTexturedPolyLineWithPartPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderMultiTexturedPolyLineWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs isFoucs: isFoucs keepScale: keepScale lineJoinType: lineJoinType lineCapType: lineCapType];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderMultiDashPolyLineWithPartPointsLineWidthtextureIndexslineDashType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* partPtRefArray = (NSArray<NSNumber*> *) args[@"partPt"];
          NSMutableArray<NSArray*>* partPt = [NSMutableArray arrayWithCapacity:partPtRefArray.count];
          for (int i = 0; i < partPtRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[partPtRefArray objectAtIndex:i]];
              [partPt addObject:item];
          }
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // jsonable arg
          NSNumber* textureIndexs = (NSNumber*) args[@"textureIndexs"];
          // enum arg
          BMKLineDashType lineDashType = (BMKLineDashType) [args[@"lineDashType"] integerValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderMultiDashPolyLineWithPartPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderMultiDashPolyLineWithPartPoints : partPt lineWidth: lineWidth textureIndexs: textureIndexs lineDashType: lineDashType];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderRegionWithPointsPointCountfillColorusingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          BMKMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
          // jsonable arg
          BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderRegionWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderRegionWithPoints : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::renderATRegionWithPointPointCountfillColorusingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          BMKMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // ref arg
          UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
          // jsonable arg
          BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::renderATRegionWithPoint(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref renderATRegionWithPoint : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::rendeCircleWithPointsPointCountlineWidthfillColorstrokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          BMKMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // ref arg
          UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::rendeCircleWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref rendeCircleWithPoints : points pointCount: pointCount lineWidth: lineWidth fillColor: fillColor strokeColor: strokeColor];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::rendePolygonWithPointsPointCountlineWidthfillColorstrokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
          BMKMapPoint points[pointsRefIdArray.count];
      
          for (int i = 0; i < pointsRefIdArray.count; i++) {
              NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:i]];
              BMKMapPoint pointsItem;
              [pointsValue getValue:&pointsItem];
              points[i] = pointsItem;
          }
          // jsonable arg
          NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
          // jsonable arg
          CGFloat lineWidth = [args[@"lineWidth"] floatValue];
          // ref arg
          UIColor* fillColor = (UIColor*) HEAP[@([args[@"fillColor"] integerValue])];
          // ref arg
          UIColor* strokeColor = (UIColor*) HEAP[@([args[@"strokeColor"] integerValue])];
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::rendePolygonWithPoints(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref rendePolygonWithPoints : points pointCount: pointCount lineWidth: lineWidth fillColor: fillColor strokeColor: strokeColor];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::glRender": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::glRender(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref glRender ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::loadStrokeTextureImages": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* textureImagesRefArray = (NSArray<NSNumber*> *) args[@"textureImages"];
          NSMutableArray<UIImage*>* textureImages = [NSMutableArray arrayWithCapacity:textureImagesRefArray.count];
          for (int i = 0; i < textureImagesRefArray.count; i++) {
              UIImage* item = (UIImage*) HEAP[[textureImagesRefArray objectAtIndex:i]];
              [textureImages addObject:item];
          }
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: BMKOverlayView@%@::loadStrokeTextureImages(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref loadStrokeTextureImages: textureImages];
      
          // result
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      @"BMKOverlayView::get_overlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKOverlayView::get_overlay");
          }
      
          // ref object
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          id<BMKOverlay> result = ref.overlay;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          NSNumber* jsonableResult = @((result).hash);
      
          methodResult(jsonableResult);
      },
      
      @"BMKOverlayView::get_colors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKOverlayView::get_colors");
          }
      
          // ref object
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          NSArray<UIColor*>* result = ref.colors;
      
          // 返回值: 列表
          NSMutableArray* jsonableResult = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [jsonableResult addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(jsonableResult);
      },
      
      @"BMKOverlayView::set_colors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"BMKOverlayView::set_colors");
          }
      
          // args
          // list arg
          NSArray<NSNumber*>* colorsRefArray = (NSArray<NSNumber*> *) args[@"colors"];
          NSMutableArray<UIColor*>* colors = [NSMutableArray arrayWithCapacity:colorsRefArray.count];
          for (int i = 0; i < colorsRefArray.count; i++) {
              UIColor* item = (UIColor*) HEAP[[colorsRefArray objectAtIndex:i]];
              [colors addObject:item];
          }
      
          // ref
          BMKOverlayView* ref = (BMKOverlayView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.colors = colors;
          methodResult(@"success");
      },
      
  };
  //endregion

  //region method call handler
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"com.fluttify/bmap_map_fluttify/BMKOverlayView"
            binaryMessenger:[_registrar messenger]];

  __weak __typeof(self)weakSelf = self;
  [channel setMethodCallHandler:^(FlutterMethodCall *methodCall, FlutterResult methodResult) {
    NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

    __strong __typeof(weakSelf)strongSelf = weakSelf;
    if (strongSelf->_handlerMap[methodCall.method] != nil) {
      strongSelf->_handlerMap[methodCall.method](strongSelf->_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }];
  //endregion
  return view;
}

//region delegate
- (void)mapViewDidFinishLoading : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishLoading");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishLoading" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapViewDidRenderValidData : (BMKMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidRenderValidDataWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidRenderValidDataWithError" arguments:@{@"mapView": argmapView, @"error": argerror}];
  
}

- (void)mapViewDidFinishRendering : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidFinishRendering");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidFinishRendering" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapView : (BMKMapView*)mapView onDrawMapFrame: (BMKMapStatus*)status
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewOnDrawMapFrame");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argstatus = @(status.hash);
  HEAP[argstatus] = status;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewOnDrawMapFrame" arguments:@{@"mapView": argmapView, @"status": argstatus}];
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewRegionWillChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewRegionWillChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  
}

- (void)mapView : (BMKMapView*)mapView regionWillChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewRegionWillChangeAnimatedreason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewRegionWillChangeAnimatedreason" arguments:@{@"mapView": argmapView, @"animated": arganimated, @"reason": argreason}];
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewRegionDidChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewRegionDidChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  
}

- (void)mapView : (BMKMapView*)mapView regionDidChangeAnimated: (BOOL)animated reason: (BMKRegionChangeReason)reason
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewRegionDidChangeAnimatedreason");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // enum callback arg
  NSNumber* argreason = @((NSInteger) reason);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewRegionDidChangeAnimatedreason" arguments:@{@"mapView": argmapView, @"animated": arganimated, @"reason": argreason}];
  
}

- (BMKAnnotationView*)mapView : (BMKMapView*)mapView viewForAnnotation: (id<BMKAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewViewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argannotation = @(annotation.hash);
  HEAP[argannotation] = annotation;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewViewForAnnotation"
              arguments:@{}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (BMKMapView*)mapView didAddAnnotationViews: (NSArray*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // list callback arg
  NSMutableArray<NSNumber*>* argviews = [NSMutableArray arrayWithCapacity:views.count];
  for (int i = 0; i < views.count; i++) {
      NSObject* item = ((NSObject*) [views objectAtIndex:i]);
      // return to dart side data
      argviews[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidAddAnnotationViews" arguments:@{@"mapView": argmapView, @"views": argviews}];
  
}

- (void)mapView : (BMKMapView*)mapView clickAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewClickAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewClickAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (BMKMapView*)mapView didSelectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidSelectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (BMKMapView*)mapView didDeselectAnnotationView: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidDeselectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (void)mapView : (BMKMapView*)mapView annotationView: (BMKAnnotationView*)view didChangeDragState: (BMKAnnotationViewDragState)newState fromOldState: (BMKAnnotationViewDragState)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;
  // primitive callback arg
  NSNumber* argnewState = @(newState);
  // primitive callback arg
  NSNumber* argoldState = @(oldState);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewAnnotationViewdidChangeDragStatefromOldState" arguments:@{@"mapView": argmapView, @"view": argview, @"newState": argnewState, @"oldState": argoldState}];
  
}

- (void)mapView : (BMKMapView*)mapView annotationViewForBubble: (BMKAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewAnnotationViewForBubble");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argview = @(view.hash);
  HEAP[argview] = view;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewAnnotationViewForBubble" arguments:@{@"mapView": argmapView, @"view": argview}];
  
}

- (BMKOverlayView*)mapView : (BMKMapView*)mapView viewForOverlay: (id<BMKOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewViewForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argoverlay = @(overlay.hash);
  HEAP[argoverlay] = overlay;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewViewForOverlay"
              arguments:@{}
                 result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (BMKMapView*)mapView didAddOverlayViews: (NSArray*)overlayViews
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewDidAddOverlayViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // list callback arg
  NSMutableArray<NSNumber*>* argoverlayViews = [NSMutableArray arrayWithCapacity:overlayViews.count];
  for (int i = 0; i < overlayViews.count; i++) {
      NSObject* item = ((NSObject*) [overlayViews objectAtIndex:i]);
      // return to dart side data
      argoverlayViews[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewDidAddOverlayViews" arguments:@{@"mapView": argmapView, @"overlayViews": argoverlayViews}];
  
}

- (void)mapView : (BMKMapView*)mapView onClickedBMKOverlayView: (BMKOverlayView*)overlayView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewOnClickedBMKOverlayView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argoverlayView = @(overlayView.hash);
  HEAP[argoverlayView] = overlayView;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewOnClickedBMKOverlayView" arguments:@{@"mapView": argmapView, @"overlayView": argoverlayView}];
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapPoi: (BMKMapPoi*)mapPoi
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewOnClickedMapPoi");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // ref callback arg
  NSNumber* argmapPoi = @(mapPoi.hash);
  HEAP[argmapPoi] = mapPoi;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewOnClickedMapPoi" arguments:@{@"mapView": argmapView, @"mapPoi": argmapPoi}];
  
}

- (void)mapView : (BMKMapView*)mapView onClickedMapBlank: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapViewOnClickedMapBlank");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapViewOnClickedMapBlank" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  
}

- (void)mapview : (BMKMapView*)mapView onDoubleClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapviewOnDoubleClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapviewOnDoubleClick" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  
}

- (void)mapview : (BMKMapView*)mapView onLongClick: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapviewOnLongClick");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapviewOnLongClick" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  
}

- (void)mapview : (BMKMapView*)mapView onForceTouch: (CLLocationCoordinate2D)coordinate force: (CGFloat)force maximumPossibleForce: (CGFloat)maximumPossibleForce
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapviewOnForceTouchforcemaximumPossibleForce");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = @(coordinateValue.hash);
  HEAP[argcoordinate] = coordinateValue;
  
  // primitive callback arg
  NSNumber* argforce = @(force);
  // primitive callback arg
  NSNumber* argmaximumPossibleForce = @(maximumPossibleForce);

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapviewOnForceTouchforcemaximumPossibleForce" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate, @"force": argforce, @"maximumPossibleForce": argmaximumPossibleForce}];
  
}

- (void)mapStatusDidChanged : (BMKMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapStatusDidChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapStatusDidChanged" arguments:@{@"mapView": argmapView}];
  
}

- (void)mapview : (BMKMapView*)mapView baseIndoorMapWithIn: (BOOL)flag baseIndoorMapInfo: (BMKBaseIndoorMapInfo*)info
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKMapViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKMapViewDelegate::mapviewBaseIndoorMapWithInbaseIndoorMapInfo");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = @(mapView.hash);
  HEAP[argmapView] = mapView;
  // primitive callback arg
  NSNumber* argflag = @(flag);
  // ref callback arg
  NSNumber* arginfo = @(info.hash);
  HEAP[arginfo] = info;

  [channel invokeMethod:@"Callback::BMKMapViewDelegate::mapviewBaseIndoorMapWithInbaseIndoorMapInfo" arguments:@{@"mapView": argmapView, @"flag": argflag, @"info": arginfo}];
  
}

- (void)onGetOfflineMapState : (int)type withState: (int)state
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"BMKOfflineMapDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"BMKOfflineMapDelegate::onGetOfflineMapStateWithState");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argtype = @(type);
  // primitive callback arg
  NSNumber* argstate = @(state);

  [channel invokeMethod:@"Callback::BMKOfflineMapDelegate::onGetOfflineMapStateWithState" arguments:@{@"type": argtype, @"state": argstate}];
  
}

//endregion

@end
