// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKPointAnnotation extends BMKShape  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKPointAnnotation> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKPointAnnotation');
    final object = BMKPointAnnotation()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKPointAnnotation>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKPointAnnotation', {'length': length});
  
    final List<BMKPointAnnotation> typedResult = resultBatch.map((result) => BMKPointAnnotation()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<CLLocationCoordinate2D> get_coordinate() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKPointAnnotation::get_coordinate", {'refId': refId});
    kNativeObjectPool.add(CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify');
    return CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  Future<bool> get_isLockedToScreen() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKPointAnnotation::get_isLockedToScreen", {'refId': refId});
  
    return result;
  }
  
  Future<CGPoint> get_screenPointToLock() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKPointAnnotation::get_screenPointToLock", {'refId': refId});
    kNativeObjectPool.add(CGPoint()..refId = result..tag = 'bmap_map_fluttify');
    return CGPoint()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_coordinate(CLLocationCoordinate2D coordinate) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKPointAnnotation::set_coordinate', {'refId': refId, "coordinate": coordinate.refId});
  
  
  }
  
  Future<void> set_isLockedToScreen(bool isLockedToScreen) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKPointAnnotation::set_isLockedToScreen', {'refId': refId, "isLockedToScreen": isLockedToScreen});
  
  
  }
  
  Future<void> set_screenPointToLock(CGPoint screenPointToLock) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKPointAnnotation::set_screenPointToLock', {'refId': refId, "screenPointToLock": screenPointToLock.refId});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKPointAnnotation_Batch on List<BMKPointAnnotation> {
  //region getters
  Future<List<CLLocationCoordinate2D>> get_coordinate_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKPointAnnotation::get_coordinate_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CLLocationCoordinate2D()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<bool>> get_isLockedToScreen_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKPointAnnotation::get_isLockedToScreen_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<CGPoint>> get_screenPointToLock_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKPointAnnotation::get_screenPointToLock_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => CGPoint()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}