// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKTileLayer extends NSObject with BMKAnnotation, BMKOverlay {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKTileLayer> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKTileLayer');
    final object = BMKTileLayer()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKTileLayer>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKTileLayer', {'length': length});
  
    final List<BMKTileLayer> typedResult = resultBatch.map((result) => BMKTileLayer()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_minZoom() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKTileLayer::get_minZoom", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_maxZoom() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKTileLayer::get_maxZoom", {'refId': refId});
  
    return result;
  }
  
  Future<BMKMapRect> get_visibleMapRect() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKTileLayer::get_visibleMapRect", {'refId': refId});
    kNativeObjectPool.add(BMKMapRect()..refId = result..tag = 'bmap_map_fluttify');
    return BMKMapRect()..refId = result..tag = 'bmap_map_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_minZoom(int minZoom) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKTileLayer::set_minZoom', {'refId': refId, "minZoom": minZoom});
  
  
  }
  
  Future<void> set_maxZoom(int maxZoom) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKTileLayer::set_maxZoom', {'refId': refId, "maxZoom": maxZoom});
  
  
  }
  
  Future<void> set_visibleMapRect(BMKMapRect visibleMapRect) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKTileLayer::set_visibleMapRect', {'refId': refId, "visibleMapRect": visibleMapRect.refId});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKTileLayer_Batch on List<BMKTileLayer> {
  //region getters
  Future<List<int>> get_minZoom_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKTileLayer::get_minZoom_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_maxZoom_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKTileLayer::get_maxZoom_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<BMKMapRect>> get_visibleMapRect_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKTileLayer::get_visibleMapRect_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => BMKMapRect()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}