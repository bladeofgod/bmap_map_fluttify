// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class BMKOLSearchRecord extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<BMKOLSearchRecord> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::createBMKOLSearchRecord');
    final object = BMKOLSearchRecord()..refId = refId..tag = 'bmap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKOLSearchRecord>> create_batch__(int length) async {
    // if (#__check_param_size__#) {
    //   return Future.error('all args must has same length!');
    // }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('ObjectFactory::create_batchBMKOLSearchRecord', {'length': length});
  
    final List<BMKOLSearchRecord> typedResult = resultBatch.map((result) => BMKOLSearchRecord()..refId = result..tag = 'bmap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_cityName() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOLSearchRecord::get_cityName", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_cityID() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOLSearchRecord::get_cityID", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_cityType() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOLSearchRecord::get_cityType", {'refId': refId});
  
    return result;
  }
  
  Future<List> get_childCities() async {
    final result = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOLSearchRecord::get_childCities", {'refId': refId});
    kNativeObjectPool.addAll((result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'bmap_map_fluttify').toList());
    return (result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'bmap_map_fluttify').toList();
  }
  
  //endregion

  //region setters
  Future<void> set_cityName(String cityName) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOLSearchRecord::set_cityName', {'refId': refId, "cityName": cityName});
  
  
  }
  
  Future<void> set_cityID(int cityID) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOLSearchRecord::set_cityID', {'refId': refId, "cityID": cityID});
  
  
  }
  
  Future<void> set_cityType(int cityType) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOLSearchRecord::set_cityType', {'refId': refId, "cityType": cityType});
  
  
  }
  
  Future<void> set_childCities(List childCities) async {
    await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod('BMKOLSearchRecord::set_childCities', {'refId': refId, "childCities": childCities.map((it) => it.refId).toList()});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension BMKOLSearchRecord_Batch on List<BMKOLSearchRecord> {
  //region getters
  Future<List<String>> get_cityName_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOLSearchRecord::get_cityName_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_cityID_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOLSearchRecord::get_cityID_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_cityType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOLSearchRecord::get_cityType_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => result).toList();
  
    return typedResult;
  }
  
  Future<List<List>> get_childCities_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/bmap_map_fluttify').invokeMethod("BMKOLSearchRecord::get_childCities_batch", [for (final item in this) {'refId': item.refId}]);
    final typedResult = (resultBatch as List).map((result) => (result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'bmap_map_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  //endregion

  //region methods
  
  //endregion
}